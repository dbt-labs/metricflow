---
integration_test:
  name: query_granularity_for_sum_day
  description: Query a sum metric by time granularities.
  model: EXTENDED_DATE_MODEL
  metrics: ["bookings"]
  group_bys: ["metric_time__day"]
  check_query: |
    SELECT
      SUM(booking) AS bookings
      , {{ render_date_trunc("ds", TimeGranularity.DAY) }} AS metric_time__day
    FROM {{ source_schema }}.fct_bookings_extended
    GROUP BY
      ds
---
integration_test:
  name: query_granularity_for_sum_week
  description: Query a sum metric by time granularities.
  model: EXTENDED_DATE_MODEL
  metrics: ["bookings"]
  group_bys: ["metric_time__week"]
  check_query: |
    SELECT
      SUM(booking) AS bookings
      , {{ render_date_trunc("ds", TimeGranularity.WEEK) }} AS metric_time__week
    FROM {{ source_schema }}.fct_bookings_extended
    GROUP BY
      {{ render_date_trunc("ds", TimeGranularity.WEEK) }}
---
integration_test:
  name: query_granularity_for_sum_month
  description: Query a sum metric by time granularities.
  model: EXTENDED_DATE_MODEL
  metrics: ["bookings"]
  group_bys: ["metric_time__month"]
  check_query: |
    SELECT
      SUM(booking) AS bookings
      , {{ render_date_trunc("ds", TimeGranularity.MONTH) }} AS metric_time__month
    FROM {{ source_schema }}.fct_bookings_extended
    GROUP BY
      {{ render_date_trunc("ds", TimeGranularity.MONTH) }}
---
integration_test:
  name: query_granularity_for_sum_quarter
  description: Query a sum metric by time granularities.
  model: EXTENDED_DATE_MODEL
  metrics: ["bookings"]
  group_bys: ["metric_time__quarter"]
  check_query: |
    SELECT
      SUM(booking) AS bookings
      , {{ render_date_trunc("ds", TimeGranularity.QUARTER) }} AS metric_time__quarter
    FROM {{ source_schema }}.fct_bookings_extended
    GROUP BY
      {{ render_date_trunc("ds", TimeGranularity.QUARTER) }}
---
integration_test:
  name: query_granularity_for_sum_year
  description: Query a sum metric by time granularities.
  model: EXTENDED_DATE_MODEL
  metrics: ["bookings"]
  group_bys: ["metric_time__year"]
  check_query: |
    SELECT
      SUM(booking) AS bookings
      , {{ render_date_trunc("ds", TimeGranularity.YEAR) }} AS metric_time__year
    FROM {{ source_schema }}.fct_bookings_extended
    GROUP BY
      {{ render_date_trunc("ds", TimeGranularity.YEAR) }}
---
integration_test:
  name: query_granularity_for_count_distinct_day
  description: Query a count distinct metric by time granularities.
  model: EXTENDED_DATE_MODEL
  metrics: ["unique_listings_booked"]
  group_bys: ["metric_time__day"]
  check_query: |
    SELECT
      COUNT(DISTINCT listing_id) AS unique_listings_booked
      , {{ render_date_trunc("ds", TimeGranularity.DAY) }} AS metric_time__day
    FROM {{ source_schema }}.fct_bookings_extended
    GROUP BY
      ds
---
integration_test:
  name: query_granularity_for_count_distinct_week
  description: Query a count distinct metric by time granularities.
  model: EXTENDED_DATE_MODEL
  metrics: ["unique_listings_booked"]
  group_bys: ["metric_time__week"]
  check_query: |
    SELECT
      COUNT(DISTINCT listing_id) AS unique_listings_booked
      , {{ render_date_trunc("ds", TimeGranularity.WEEK) }} AS metric_time__week
    FROM {{ source_schema }}.fct_bookings_extended
    GROUP BY
      {{ render_date_trunc("ds", TimeGranularity.WEEK) }}
---
integration_test:
  name: query_granularity_for_count_distinct_month
  description: Query a count distinct metric by time granularities.
  model: EXTENDED_DATE_MODEL
  metrics: ["unique_listings_booked"]
  group_bys: ["metric_time__month"]
  check_query: |
    SELECT
      COUNT(DISTINCT listing_id) AS unique_listings_booked
      , {{ render_date_trunc("ds", TimeGranularity.MONTH) }} AS metric_time__month
    FROM {{ source_schema }}.fct_bookings_extended
    GROUP BY
      {{ render_date_trunc("ds", TimeGranularity.MONTH) }}
---
integration_test:
  name: query_granularity_for_count_distinct_quarter
  description: Query a count distinct metric by time granularities.
  model: EXTENDED_DATE_MODEL
  metrics: ["unique_listings_booked"]
  group_bys: ["metric_time__quarter"]
  check_query: |
    SELECT
      COUNT(DISTINCT listing_id) AS unique_listings_booked
      , {{ render_date_trunc("ds", TimeGranularity.QUARTER) }} AS metric_time__quarter
    FROM {{ source_schema }}.fct_bookings_extended
    GROUP BY
      {{ render_date_trunc("ds", TimeGranularity.QUARTER) }}
---
integration_test:
  name: query_granularity_for_count_distinct_year
  description: Query a count distinct metric by time granularities.
  model: EXTENDED_DATE_MODEL
  metrics: ["unique_listings_booked"]
  group_bys: ["metric_time__year"]
  check_query: |
    SELECT
      COUNT(DISTINCT listing_id) AS unique_listings_booked
      , {{ render_date_trunc("ds", TimeGranularity.YEAR) }} AS metric_time__year
    FROM {{ source_schema }}.fct_bookings_extended
    GROUP BY
      {{ render_date_trunc("ds", TimeGranularity.YEAR) }}
---
integration_test:
  name: query_granularity_for_joined_dundered_dimension_day
  description: Query a count distinct metric by time granularities.
  model: EXTENDED_DATE_MODEL
  metrics: ["bookings"]
  group_bys: ["listing__ds__day"]
  check_query: |
    SELECT
      SUM(booking) AS bookings
      , {{ render_date_trunc("ds", TimeGranularity.DAY) }} AS listing__ds__day
    FROM {{ source_schema }}.fct_bookings_extended b
    LEFT OUTER JOIN {{ source_schema }}.dim_listings_extended l
    ON b.listing_id = l.listing_id
    GROUP BY
      2
---
integration_test:
  name: query_granularity_for_joined_dundered_dimension_month
  description: Query a count distinct metric by time granularities.
  model: EXTENDED_DATE_MODEL
  metrics: ["bookings"]
  group_bys: ["listing__ds__month"]
  check_query: |
    SELECT
      SUM(booking) AS bookings
      , {{ render_date_trunc("l.listing_creation_ds", TimeGranularity.MONTH) }} AS listing__ds__month
    FROM {{ source_schema }}.fct_bookings_extended b
    LEFT OUTER JOIN {{ source_schema }}.dim_listings_extended l
    ON b.listing_id = l.listing_id
    GROUP BY
      2
---
integration_test:
  name: metric_with_non_day_granularity_expected_boundary
  description: Query a metric at a time granularity on expected date boundaries
  model: EXTENDED_DATE_MODEL
  metrics: ["bookings_monthly"]
  group_bys: ["metric_time"]
  time_constraint: ["2020-01-01", "2020-02-29"]
  check_query: |
    SELECT
      SUM(bookings_monthly) AS bookings_monthly
      , ds AS metric_time__month
    FROM {{ source_schema }}.fct_bookings_extended_monthly
    WHERE {{ render_time_constraint("ds", "2020-01-01", "2020-02-29") }}
    GROUP BY
      ds
---
integration_test:
  name: metric_with_non_day_granularity_on_non_boundaries
  description: Query a metric at a time granularity on non  date boundaries
  model: EXTENDED_DATE_MODEL
  metrics: ["bookings_monthly"]
  group_bys: ["metric_time"]
  time_constraint: ["2020-01-15", "2020-02-15"]
  check_query: |
    SELECT
      SUM(bookings_monthly) AS bookings_monthly
      , ds AS metric_time__month
    FROM {{ source_schema }}.fct_bookings_extended_monthly
    WHERE {{ render_time_constraint("ds", "2020-01-01", "2020-02-29") }}
    GROUP BY
      ds
---
integration_test:
  name: weekly_metric_on_non_boundaries
  description: Query a metric from a sql query by time granularities.
  model: EXTENDED_DATE_MODEL
  metrics: ["bookings"]
  group_bys: ["metric_time__week"]
  time_constraint: ["2020-01-15", "2020-01-22"]
  check_query: |
    SELECT
      SUM(booking) AS bookings
      , {{ render_date_trunc("ds", TimeGranularity.WEEK) }} AS metric_time__week
    FROM {{ source_schema }}.fct_bookings_extended
    WHERE {{ render_time_constraint("ds", "2020-01-13", "2020-01-26") }}
    GROUP BY
      {{ render_date_trunc("ds", TimeGranularity.WEEK) }}
---
integration_test:
  name: daily_metric_with_monthly_time_dimension
  description: Query a metric with a month-granularity time dimensions. Filter should expand to requested granularity.
  model: EXTENDED_DATE_MODEL
  metrics: ["bookings"]
  group_bys: ["metric_time__month"]
  time_constraint: ["2020-01-01", "2020-01-02"]
  check_query: |
    SELECT
      SUM(booking) AS bookings
      , {{ render_date_trunc("ds", TimeGranularity.MONTH) }} AS metric_time__month
    FROM {{ source_schema }}.fct_bookings_extended
    WHERE {{ render_time_constraint("ds", "2020-01-01", "2020-01-31") }}
    GROUP BY
      {{ render_date_trunc("ds", TimeGranularity.MONTH) }}
---
integration_test:
  name: metrics_with_different_time_granularities
  description: Query two metrics with different time granularities.
  model: EXTENDED_DATE_MODEL
  metrics: ["bookings_monthly", "bookings"]
  group_bys: ["metric_time"]
  time_constraint: ["2020-01-01", "2020-02-29"]
  check_query: |
    SELECT
      SUM(bookings_monthly) as bookings_monthly
      , SUM(bookings) as bookings
      , ds AS metric_time__month
    FROM (
      SELECT
        a.bookings_monthly
        , b.bookings
        , COALESCE(a.ds, b.ds) AS ds
      FROM (
        SELECT
          SUM(bookings_monthly) AS bookings_monthly
          , ds
        FROM {{ source_schema }}.fct_bookings_extended_monthly
        WHERE
          {{ render_time_constraint("ds", "2020-01-01", "2020-02-29") }}
        GROUP BY ds
      ) a
      FULL OUTER JOIN (
        SELECT
          SUM(booking) AS bookings
          , {{ render_date_trunc("ds", TimeGranularity.MONTH) }} AS ds
        FROM {{ source_schema }}.fct_bookings_extended
        WHERE
          {{ render_time_constraint("ds", "2020-01-01", "2020-02-29") }}
        GROUP BY {{ render_date_trunc("ds", TimeGranularity.MONTH) }}
      ) b
      ON a.ds = b.ds
      ) c
    GROUP BY
      ds
---
integration_test:
  name: metrics_with_different_time_granularities_and_no_metric_time
  description: Query two metrics with different time granularities with a common dimension, but no metric time.
  model: EXTENDED_DATE_MODEL
  metrics: ["bookings_monthly", "bookings"]
  group_bys: ["listing__ds"]
  time_constraint: ["2020-01-15", "2020-02-15"]
  check_query: |
    SELECT
      a.bookings_monthly AS bookings_monthly
      , b.bookings AS bookings
      , COALESCE(a.listing__ds__day, b.listing__ds__day) AS listing__ds__day
    FROM (
      SELECT
        SUM(bookings_monthly) AS bookings_monthly
        , l.listing_creation_ds AS listing__ds__day
      FROM {{ source_schema }}.fct_bookings_extended_monthly b
      LEFT OUTER JOIN {{ source_schema }}.dim_listings_extended l
      ON b.listing_id = l.listing_id
      WHERE
        {{ render_time_constraint("ds", "2020-01-01", "2020-02-29") }}
      GROUP BY 2
    ) a
    FULL OUTER JOIN (
      SELECT
        SUM(booking) AS bookings
        , l.listing_creation_ds AS listing__ds__day
      FROM {{ source_schema }}.fct_bookings_extended b
      LEFT OUTER JOIN {{ source_schema }}.dim_listings_extended l
      ON b.listing_id = l.listing_id
      WHERE
        {{ render_time_constraint("ds", "2020-01-01", "2020-02-29") }}
      GROUP BY 2
    ) b
    ON a.listing__ds__day = b.listing__ds__day
---
integration_test:
  name: simple_metric_with_custom_granularity
  description: A simple metric queried with a custom granularity
  model: SIMPLE_MODEL
  metrics: [ "bookings"]
  group_bys: ["booking__ds__martian_day"]
  check_query: |
    SELECT
      b.martian_day AS booking__ds__martian_day
      , SUM(1) AS bookings
    FROM {{ source_schema }}.fct_bookings a
    LEFT OUTER JOIN {{ source_schema }}.mf_time_spine b
    ON {{ render_date_trunc("a.ds", TimeGranularity.DAY) }} = b.ds
    GROUP BY b.martian_day
---
integration_test:
  name: simple_metric_with_custom_granularity_and_join
  description: A simple metric queried with a custom granularity
  model: SIMPLE_MODEL
  metrics: [ "bookings"]
  group_bys: ["listing__ds__martian_day"]
  check_query: |
    SELECT
      c.martian_day AS listing__ds__martian_day
      , SUM(1) AS bookings
    FROM {{ source_schema }}.fct_bookings a
    LEFT OUTER JOIN {{ source_schema }}.dim_listings_latest l
      ON a.listing_id = l.listing_id
    LEFT OUTER JOIN {{ source_schema }}.mf_time_spine c
      ON {{ render_date_trunc("l.created_at", TimeGranularity.DAY) }} = c.ds
    GROUP BY c.martian_day
---
integration_test:
  name: cumulative_metric_with_custom_granularity
  description: A cumulative metric queried with a custom granularity
  model: SIMPLE_MODEL
  metrics: [ "trailing_2_months_revenue"]
  group_bys: ["metric_time__martian_day"]
  check_query: |
    SELECT
      metric_time__martian_day
      , trailing_2_months_revenue
    FROM (
      SELECT
        metric_time__martian_day
        , AVG(txn_revenue) OVER (PARTITION BY metric_time__martian_day) AS trailing_2_months_revenue
      FROM (
        SELECT
          ts2.martian_day AS metric_time__martian_day
          , ts.ds AS metric_time__day
          , SUM(r.revenue) AS txn_revenue
        FROM {{ source_schema }}.mf_time_spine ts
        INNER JOIN {{ source_schema }}.fct_revenue r
          ON ({{ render_date_trunc("r.created_at", TimeGranularity.DAY) }} <= ts.ds)
          AND ({{ render_date_trunc("r.created_at", TimeGranularity.DAY) }} > {{ render_date_sub("ts", "ds", 2, TimeGranularity.MONTH) }})
        LEFT OUTER JOIN {{ source_schema }}.mf_time_spine ts2
          ON ts.ds = ts2.ds
        GROUP BY ts2.martian_day, ts.ds
      ) ts
    ) subq_9
    GROUP BY metric_time__martian_day, trailing_2_months_revenue
---
integration_test:
  name: derived_offset_metric_with_custom_granularity
  description: A derived metric queried with a custom granularity
  model: SIMPLE_MODEL
  metrics: [ "booking_fees_last_week_per_booker_this_week"]
  group_bys: ["metric_time__martian_day"]
  check_query: |
    SELECT
      metric_time__martian_day
      , booking_value * 0.05 / bookers AS booking_fees_last_week_per_booker_this_week
    FROM (
      SELECT
        COALESCE(subq_8.metric_time__martian_day, subq_14.metric_time__martian_day) AS metric_time__martian_day
        , MAX(subq_8.booking_value) AS booking_value
        , MAX(subq_14.bookers) AS bookers
      FROM (
        SELECT
          ts2.martian_day AS metric_time__martian_day
          , SUM(b.booking_value) AS booking_value
        FROM {{ source_schema }}.mf_time_spine ts
        INNER JOIN {{ source_schema }}.fct_bookings b
          ON {{ render_date_sub("ts", "ds", 1, TimeGranularity.WEEK) }} = {{ render_date_trunc("b.ds", TimeGranularity.DAY) }}
        LEFT OUTER JOIN {{ source_schema }}.mf_time_spine ts2 ON ts.ds = ts2.ds
        GROUP BY ts2.martian_day
      ) subq_8
      FULL OUTER JOIN (
        SELECT
          ts3.martian_day AS metric_time__martian_day
          , COUNT(DISTINCT b.guest_id) AS bookers
        FROM {{ source_schema }}.fct_bookings b
        LEFT OUTER JOIN {{ source_schema }}.mf_time_spine ts3
          ON {{ render_date_trunc("b.ds", TimeGranularity.DAY) }} = ts3.ds
        GROUP BY ts3.martian_day
      ) subq_14
      ON subq_8.metric_time__martian_day = subq_14.metric_time__martian_day
      GROUP BY COALESCE(subq_8.metric_time__martian_day, subq_14.metric_time__martian_day)
    ) subq_15
---
integration_test:
  name: multiple_metrics_with_custom_granularity
  description: A derived metric queried with a custom granularity
  model: SIMPLE_MODEL
  metrics: [ "bookings", "listings"]
  group_bys: ["metric_time__martian_day", "listing__ds__month"]
  check_query: |
    SELECT
      COALESCE(subq_10.metric_time__martian_day, subq_16.metric_time__martian_day) AS metric_time__martian_day
      , COALESCE(subq_10.listing__ds__month, subq_16.listing__ds__month) AS listing__ds__month
      , MAX(subq_10.bookings) AS bookings
      , MAX(subq_16.listings) AS listings
    FROM (
      SELECT
        ts.martian_day AS metric_time__martian_day
        , {{ render_date_trunc("l.created_at", TimeGranularity.MONTH) }} AS listing__ds__month
        , SUM(1) AS bookings
      FROM {{ source_schema }}.fct_bookings b
      LEFT OUTER JOIN {{ source_schema }}.dim_listings_latest l ON b.listing_id = l.listing_id
      LEFT OUTER JOIN {{ source_schema }}.mf_time_spine ts
        ON {{ render_date_trunc("b.ds", TimeGranularity.DAY) }} = ts.ds
      GROUP BY ts.martian_day, {{ render_date_trunc("l.created_at", TimeGranularity.MONTH) }}
    ) subq_10
    FULL OUTER JOIN (
      SELECT
        ts.martian_day AS metric_time__martian_day
        , {{ render_date_trunc("l.created_at", TimeGranularity.MONTH) }} AS listing__ds__month
        , SUM(1) AS listings
      FROM {{ source_schema }}.dim_listings_latest l
      LEFT OUTER JOIN {{ source_schema }}.mf_time_spine ts
        ON {{ render_date_trunc("l.created_at", TimeGranularity.DAY) }} = ts.ds
      GROUP BY ts.martian_day, {{ render_date_trunc("l.created_at", TimeGranularity.MONTH) }}
    ) subq_16
    ON (subq_10.metric_time__martian_day = subq_16.metric_time__martian_day)
      AND (subq_10.listing__ds__month = subq_16.listing__ds__month)
    GROUP BY
      COALESCE(subq_10.metric_time__martian_day, subq_16.metric_time__martian_day)
      , COALESCE(subq_10.listing__ds__month, subq_16.listing__ds__month)
---
integration_test:
  name: simple_metric_with_custom_granularity_filter
  description: Simple metric queried with a filter on a custom grain, where that grain is not used in the group by.
  model: SIMPLE_MODEL
  metrics: ["bookings"]
  where_filter: |
    {{ render_time_dimension_template('listing__ds', 'martian_day') }} >= '2019-12-20'
  check_query: |
    SELECT
      SUM(1) AS bookings
    FROM {{ source_schema }}.fct_bookings b
    LEFT OUTER JOIN {{ source_schema }}.dim_listings_latest l ON b.listing_id = l.listing_id
    LEFT OUTER JOIN {{ source_schema }}.mf_time_spine ts ON DATE_TRUNC('day', l.created_at) = ts.ds
    WHERE ts.martian_day >= '2019-12-20'
---
integration_test:
  name: simple_metric_with_custom_granularity_in_filter_and_group_by
  description: Simple metric queried with a filter on a custom grain, where that grain is also used in the group by.
  model: SIMPLE_MODEL
  metrics: ["bookings"]
  group_bys: ["listing__ds__martian_day"]
  where_filter: |
    {{ render_time_dimension_template('listing__ds', 'martian_day') }} >= '2019-12-20'
  check_query: |
    SELECT
      ts.martian_day AS listing__ds__martian_day
      , SUM(1) AS bookings
    FROM {{ source_schema }}.fct_bookings b
    LEFT OUTER JOIN {{ source_schema }}.dim_listings_latest l ON b.listing_id = l.listing_id
    LEFT OUTER JOIN {{ source_schema }}.mf_time_spine ts
    ON DATE_TRUNC('day', l.created_at) = ts.ds
    WHERE listing__ds__martian_day >= '2019-12-20'
    GROUP BY listing__ds__martian_day
---
integration_test:
  name: test_no_metrics_with_custom_granularity_filter
  description: Group by items only queried with a filter on a custom grain, where that grain is not used in the group by.
  model: SIMPLE_MODEL
  group_bys: ["metric_time__day"]
  where_filter: |
    {{ render_time_dimension_template('listing__ds', 'martian_day') }} >= '2019-12-20'
  check_query: |
    SELECT
      DATE_TRUNC('day', ts.ds) AS metric_time__day
    FROM {{ source_schema }}.dim_listings_latest l
    CROSS JOIN {{ source_schema }}.mf_time_spine ts
    LEFT OUTER JOIN {{ source_schema }}.mf_time_spine ts2
    ON DATE_TRUNC('day', l.created_at) = ts2.ds
    WHERE ts2.martian_day >= '2019-12-20'
    GROUP BY metric_time__day
---
integration_test:
  name: test_no_metrics_with_custom_granularity_in_filter_and_group_by
  description: Group by items only queried with a filter on a custom grain, where that grain is also used in the group by.
  model: SIMPLE_MODEL
  group_bys: ["listing__ds__martian_day"]
  where_filter: |
    {{ render_time_dimension_template('listing__ds', 'martian_day') }} >= '2019-12-20'
  check_query: |
    SELECT
      ts.martian_day AS listing__ds__martian_day
    FROM {{ source_schema }}.dim_listings_latest l
    LEFT OUTER JOIN {{ source_schema }}.mf_time_spine ts
      ON DATE_TRUNC('day', l.created_at) = ts.ds
    WHERE listing__ds__martian_day >= '2019-12-20'
    GROUP BY listing__ds__martian_day
