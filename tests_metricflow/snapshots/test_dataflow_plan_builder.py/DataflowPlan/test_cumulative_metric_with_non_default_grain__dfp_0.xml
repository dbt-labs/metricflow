test_name: test_cumulative_metric_with_non_default_grain
test_filename: test_dataflow_plan_builder.py
docstring:
  Test querying a cumulative metric using a granularity that is not the metric's default.
---
<DataflowPlan>
    <WriteToResultDataTableNode>
        <!-- description = 'Write to DataTable' -->
        <!-- node_id = NodeId(id_str='wrd_0') -->
        <WindowReaggregationNode>
            <!-- description = 'Re-aggregate Metrics via Window Functions' -->
            <!-- node_id = NodeId(id_str='wr_0') -->
            <!-- metric_spec = MetricSpec(element_name='trailing_2_months_revenue') -->
            <!-- order_by_spec =                                                                 -->
            <!--   TimeDimensionSpec(                                                            -->
            <!--     element_name='metric_time',                                                 -->
            <!--     time_granularity=ExpandedTimeGranularity(name='day', base_granularity=DAY), -->
            <!--   )                                                                             -->
            <!-- partition_by_specs =                                                                -->
            <!--   (                                                                                 -->
            <!--     TimeDimensionSpec(                                                              -->
            <!--       element_name='metric_time',                                                   -->
            <!--       time_granularity=ExpandedTimeGranularity(name='year', base_granularity=YEAR), -->
            <!--     ),                                                                              -->
            <!--   )                                                                                 -->
            <ComputeMetricsNode>
                <!-- description = 'Compute Metrics via Expressions' -->
                <!-- node_id = NodeId(id_str='cm_1') -->
                <!-- metric_spec = MetricSpec(element_name='trailing_2_months_revenue') -->
                <ComputeMetricsNode>
                    <!-- description = 'Compute Metrics via Expressions' -->
                    <!-- node_id = NodeId(id_str='cm_0') -->
                    <!-- metric_spec = MetricSpec(element_name='revenue') -->
                    <AggregateSimpleMetricInputsNode>
                        <!-- description = 'Aggregate Inputs for Simple Metrics' -->
                        <!-- node_id = NodeId(id_str='am_0') -->
                        <!-- alias_mapping = {} -->
                        <!-- null_fill_value_mapping = {} -->
                        <FilterElementsNode>
                            <!-- description =                                                                -->
                            <!--   "Pass Only Elements: ['revenue', 'metric_time__year', 'metric_time__day']" -->
                            <!-- node_id = NodeId(id_str='pfe_0') -->
                            <!-- include_spec = SimpleMetricInputSpec(element_name='revenue') -->
                            <!-- include_spec =                                                                    -->
                            <!--   TimeDimensionSpec(                                                              -->
                            <!--     element_name='metric_time',                                                   -->
                            <!--     time_granularity=ExpandedTimeGranularity(name='year', base_granularity=YEAR), -->
                            <!--   )                                                                               -->
                            <!-- include_spec =                                                                  -->
                            <!--   TimeDimensionSpec(                                                            -->
                            <!--     element_name='metric_time',                                                 -->
                            <!--     time_granularity=ExpandedTimeGranularity(name='day', base_granularity=DAY), -->
                            <!--   )                                                                             -->
                            <!-- distinct = False -->
                            <JoinOverTimeRangeNode>
                                <!-- description = 'Join Self Over Time Range' -->
                                <!-- node_id = NodeId(id_str='jotr_0') -->
                                <!-- queried_agg_time_dimension_specs =                                                  -->
                                <!--   (                                                                                 -->
                                <!--     TimeDimensionSpec(                                                              -->
                                <!--       element_name='metric_time',                                                   -->
                                <!--       time_granularity=ExpandedTimeGranularity(name='year', base_granularity=YEAR), -->
                                <!--     ),                                                                              -->
                                <!--     TimeDimensionSpec(                                                              -->
                                <!--       element_name='metric_time',                                                   -->
                                <!--       time_granularity=ExpandedTimeGranularity(name='day', base_granularity=DAY),   -->
                                <!--     ),                                                                              -->
                                <!--   )                                                                                 -->
                                <!-- window = PydanticMetricTimeWindow(count=2, granularity='month') -->
                                <MetricTimeDimensionTransformNode>
                                    <!-- description = "Metric Time Dimension 'ds'" -->
                                    <!-- node_id = NodeId(id_str='sma_28015') -->
                                    <!-- aggregation_time_dimension = 'ds' -->
                                    <ReadSqlSourceNode>
                                        <!-- description = "Read From SemanticModelDataSet('revenue')" -->
                                        <!-- node_id = NodeId(id_str='rss_28026') -->
                                        <!-- data_set = SemanticModelDataSet('revenue') -->
                                    </ReadSqlSourceNode>
                                </MetricTimeDimensionTransformNode>
                            </JoinOverTimeRangeNode>
                        </FilterElementsNode>
                    </AggregateSimpleMetricInputsNode>
                </ComputeMetricsNode>
            </ComputeMetricsNode>
        </WindowReaggregationNode>
    </WriteToResultDataTableNode>
</DataflowPlan>
