[build-system]
requires = ["hatchling~=1.14.0", "hatch-requirements-txt >= 0.4.1, <0.5.0"]
build-backend = "hatchling.build"

[project]
name = "metricflow"
version = "0.207.0.dev1"
description = "Translates a simple metric definition into reusable SQL and executes it against the SQL engine of your choice."
readme = "README.md"
requires-python = ">=3.8,<3.13"
license = "BUSL-1.1"
keywords = []
authors = [
  {name = "dbt Labs"}
]

classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]

# Dependencies are specified through the `hatch-requirements-txt` plug-in.
dynamic = ["dependencies", "optional-dependencies"]

[tool.hatch.metadata.hooks.requirements_txt]
files = [
  "metricflow-semantics/extra-hatch-configuration/requirements.txt",
  "extra-hatch-configuration/requirements.txt",
]


[project.urls]
Documentation = "https://docs.getdbt.com/docs/build/about-metricflow"
"Source Code" = "https://github.com/dbt-labs/metricflow"


# There are files that hatch will always include as well (e.g. the LICENSE file).
# See hatch build docs for more details.
[tool.hatch.build.targets.sdist]
packages = ["metricflow", "metricflow-semantics/metricflow_semantics"]

# include doesn't seem to work with packages, so using force include.
[tool.hatch.build.targets.sdist.force-include]
"ATTRIBUTION.md" = "ATTRIBUTION.md"

[tool.hatch.build.targets.wheel]
packages = ["metricflow", "metricflow-semantics/metricflow_semantics"]

[tool.hatch.build.targets.wheel.force-include]
"ATTRIBUTION.md" = "ATTRIBUTION.md"


# Environment setup
[tool.hatch.envs.dev-env]
description = "Environment for development. Includes a DuckDB-backed client."
run = "run-coverage --no-cov"

dependencies = [
  # Developer tools
  "mypy>=1.7.0, <1.8.0",
  "pre-commit>=3.2.2, <3.3.0",
  "pytest-mock>=3.14.0, <3.15.0",
  "pytest-xdist>=3.6.0, <3.7.0",
  "pytest>=8.0.0, < 9.0.0",
  "PyYAML>=6.0, <7.0.0",
  "tabulate>=0.8.9",
  "types-PyYAML",
  "types-python-dateutil",
  "types-tabulate",
  # CLI-related
  "halo>=0.0.31, <0.1.0",
  "update-checker>=0.18.0, <0.19.0",
  # Bug with mypy: https://github.com/pallets/click/issues/2558#issuecomment-1656546003
  "click>=8.1.6",
  "dbt-core @ git+https://github.com/dbt-labs/dbt-core@e53420c1d073dc81609ae7aa84cef6ee09650576#subdirectory=core",
  "dbt-duckdb>=1.8.0, <1.9.0",
]


[tool.hatch.envs.dev-env.env-vars]
MF_TEST_ADAPTER_TYPE="duckdb"
MF_SQL_ENGINE_URL="duckdb://"
# This allows us to use the classes in the `dbt-metricflow` package for tests without installing the package.
# `dbt-metricflow` can't be installed as it has `metricflow` as a dependency.
PYTHONPATH="metricflow-semantics:dbt-metricflow"


[tool.hatch.envs.postgres-env.env-vars]
PYTHONPATH="metricflow-semantics:dbt-metricflow"
MF_SQL_ENGINE_URL="postgresql://metricflow@localhost:5432/metricflow"
MF_SQL_ENGINE_PASSWORD="metricflowing"
MF_TEST_ADAPTER_TYPE="postgres"

[tool.hatch.envs.postgres-env]
description = "Dev environment for working with Postgres adapter"
template = "dev-env"
extra-dependencies = ["dbt-postgres>=1.8.0, <1.9.0"]


## NOTE: All environments below should have their authentication credentials
## configured independently of the hatch env construction

[tool.hatch.envs.bigquery-env.env-vars]
PYTHONPATH="metricflow-semantics:dbt-metricflow"
MF_TEST_ADAPTER_TYPE="bigquery"

[tool.hatch.envs.bigquery-env]
description = "Dev environment for working with the BigQuery adapter"
template = "dev-env"
extra-dependencies = ["dbt-bigquery>=1.8.0, <1.9.0"]

[tool.hatch.envs.databricks-env.env-vars]
PYTHONPATH="metricflow-semantics:dbt-metricflow"
MF_TEST_ADAPTER_TYPE="databricks"


[tool.hatch.envs.databricks-env]
description = "Dev environment for working with the Databricks adapter"
template = "dev-env"

# Needed as dbt-databricks 1.8.1 depends on dbt-core~=1.8.0 while this uses dbt-core 1.9.0a1
pre-install-commands = [
  "pip install dbt-databricks"
]


[tool.hatch.envs.redshift-env.env-vars]
PYTHONPATH="metricflow-semantics:dbt-metricflow"
MF_TEST_ADAPTER_TYPE="redshift"

[tool.hatch.envs.redshift-env]
description = "Dev environment for working with the Redshift adapter"
template = "dev-env"
extra-dependencies = ["dbt-redshift>=1.8.0, <1.9.0"]


[tool.hatch.envs.snowflake-env.env-vars]
PYTHONPATH="metricflow-semantics:dbt-metricflow"
MF_TEST_ADAPTER_TYPE="snowflake"

[tool.hatch.envs.snowflake-env]
description = "Dev environment for working with Snowflake adapter"
template = "dev-env"
extra-dependencies = ["dbt-snowflake>=1.8.0, <1.9.0"]


[tool.hatch.envs.trino-env.env-vars]
PYTHONPATH="metricflow-semantics:dbt-metricflow"
MF_TEST_ADAPTER_TYPE = "trino"
MF_SQL_ENGINE_URL = "trino://trino@localhost:8080/"
DBT_ENV_SECRET_CATALOG="memory"

[tool.hatch.envs.trino-env]
description = "Dev environment for working with the Trino adapter"
template = "dev-env"
extra-dependencies = ["trino>=0.328.0, <0.329.0", "dbt-trino>=1.8.0, <1.9.0"]


[tool.black]
line-length = 120

[tool.pytest.ini_options]
# Many deprecation warnings come from 3rd-party libraries and make the
# output of pytest noisy. Since no action is going to be taken, hide those
# warnings.
filterwarnings = [
  "ignore::DeprecationWarning:dbt_common.*:",
  "ignore::DeprecationWarning:halo.*:",
  # `protobuff` issue: https://github.com/protocolbuffers/protobuf/issues/15077
  # protobuff is specified by `dbt-core`
  'ignore:.*Type google.*:DeprecationWarning',
]
python_functions = "test_* populate_source_schema"
