from __future__ import annotations

from typing import List, Optional, Sequence

from metricflow.model.objects.common import Element
from metricflow.model.objects.elements.dimension import Dimension
from metricflow.model.objects.elements.identifier import Identifier
from metricflow.model.objects.elements.measure import Measure
from metricflow.model.objects.utils import ParseableObject, HashableBaseModel
from metricflow.object_utils import ExtendedEnum
from metricflow.specs import LinkableElementReference, MeasureReference


class DataSourceOrigin(ExtendedEnum):
    """Describes how data sources were created

    Impacts determination of validity and duration of storage
    """

    SOURCE = "source"  # "input" data sources
    DERIVED = "derived"  # generated by the semantic layer originating (perhaps indirectly) from sources


class MutabilityType(ExtendedEnum):
    """How data at the physical layer is expected to behave"""

    UNKNOWN = "UNKNOWN"
    IMMUTABLE = "IMMUTABLE"  # never changes
    APPEND_ONLY = "APPEND_ONLY"  # appends along an orderable column
    DS_APPEND_ONLY = "DS_APPEND_ONLY"  # appends along daily column
    FULL_MUTATION = "FULL_MUTATION"  # no guarantees, everything may change


class MutabilityTypeParams(HashableBaseModel, ParseableObject):
    """Type params add additional context to mutability"""

    min: Optional[str]
    max: Optional[str]
    update_cron: Optional[str]
    along: Optional[str]


class Mutability(HashableBaseModel, ParseableObject):
    """Describes the mutability properties of a data source"""

    type: MutabilityType
    type_params: Optional[MutabilityTypeParams]


class DataSource(HashableBaseModel, ParseableObject):
    """Describes a data source"""

    name: str
    sql_table: Optional[str]
    sql_query: Optional[str]
    dbt_model: Optional[str]

    identifiers: Sequence[Identifier] = []
    measures: Sequence[Measure] = []
    dimensions: Sequence[Dimension] = []

    mutability: Mutability

    origin: DataSourceOrigin = DataSourceOrigin.SOURCE

    @property
    def elements(self) -> List[Element]:  # noqa: D
        res: List[Element] = []
        res.extend(self.identifiers)
        res.extend(self.dimensions)

        return res

    @property
    def element_refs(self) -> List[LinkableElementReference]:  # noqa: D chtodo: ref
        return [n.ref for n in self.elements]

    @property
    def identifier_refs(self) -> List[LinkableElementReference]:  # noqa: D chtodo: ref
        return [i.ref for i in self.identifiers]

    @property
    def dimension_refs(self) -> List[LinkableElementReference]:  # noqa: D chtodo: ref
        return [i.ref for i in self.dimensions]

    @property
    def measure_refs(self) -> List[MeasureReference]:  # noqa: D
        return [i.ref for i in self.measures]

    def get_measure(self, measure_ref: MeasureReference) -> Measure:  # noqa: D
        for measure in self.measures:
            if measure.ref == measure_ref:
                return measure

        raise ValueError(f"No dimension with name ({measure_ref.element_name}) in data source with name ({self.name})")

    def get_element(self, ref: LinkableElementReference) -> Element:  # noqa: D chtodo: ref
        for dim in self.dimensions:
            if dim.ref == ref:
                return dim
        for ident in self.identifiers:
            if ident.ref == ref:
                return ident

        raise ValueError(f"No dimension with name ({ref.element_name}) in data source with name ({self.name})")

    def get_dimension(self, dimension_ref: LinkableElementReference) -> Dimension:  # noqa: D chtodo: ref
        for dim in self.dimensions:
            if dim.ref == dimension_ref:
                return dim

        raise ValueError(
            f"No dimension with name ({dimension_ref.element_name}) in data source with name ({self.name})"
        )

    def get_identifier(self, identifier_ref: LinkableElementReference) -> Identifier:  # noqa: D chtodo: ref
        for ident in self.identifiers:
            if ident.ref == identifier_ref:
                return ident

        raise ValueError(
            f"No identifier with name ({identifier_ref.element_name}) in data source with name ({self.name})"
        )

    @property
    def partitions(self) -> List[Dimension]:  # noqa: D
        return [dim for dim in self.dimensions or [] if dim.is_partition]

    @property
    def partition(self) -> Optional[Dimension]:  # noqa: D
        partitions = self.partitions
        if not partitions:
            return None
        if len(partitions) > 1:
            raise ValueError(f"too many partitions for data source {self.name}")
        return partitions[0]
