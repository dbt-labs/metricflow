---
integration_test:
  name: windowed_cumulative_metric
  description: Query a cumulative metric that aggregates the last 2 months.
  model: SIMPLE_MODEL
  metrics: ["trailing_2_months_revenue"]
  group_bys: ["metric_time"]
  order_bys: ["metric_time"]
  time_constraint: ["2020-03-05", "2021-01-04"]
  check_query: |
    SELECT
      SUM(b.txn_revenue) as trailing_2_months_revenue
      , a.ds AS metric_time__day
    FROM (
      SELECT ds
      FROM {{ mf_time_spine_source }}
      WHERE {{ render_time_constraint("ds", "2020-01-05", "2021-01-04") }}
    ) a
    INNER JOIN (
      SELECT
        revenue as txn_revenue
        , created_at AS ds
      FROM {{ source_schema }}.fct_revenue
    ) b
    ON b.ds <= a.ds AND b.ds > {{ render_date_sub("a", "ds", 2, TimeGranularity.MONTH) }}
    WHERE {{ render_time_constraint("a.ds", "2020-03-05", "2021-01-04") }}
    GROUP BY a.ds
    ORDER BY a.ds
---
integration_test:
  name: windowed_cumulative_metric_with_joined_dim
  description: Query a cumulative metric that aggregates the last 2 months with a joined dimension.
  model: SIMPLE_MODEL
  metrics: ["trailing_2_months_revenue"]
  group_bys: ["metric_time", "user__home_state_latest"]
  order_bys: ["metric_time", "user__home_state_latest"]
  time_constraint: ["2020-03-05", "2021-01-04"]
  check_query: |
    SELECT
      SUM(revenue) as trailing_2_months_revenue
      , b.user__home_state_latest as user__home_state_latest
      , a.ds AS metric_time__day
    FROM (
      SELECT ds
      FROM {{ mf_time_spine_source }}
      WHERE {{ render_time_constraint("ds", "2020-01-05", "2021-01-04") }}
    ) a
    INNER JOIN (
      SELECT
        m.revenue as revenue
        , u.home_state_latest as user__home_state_latest
        , m.created_at AS ds
      FROM {{ source_schema }}.fct_revenue m
      LEFT OUTER JOIN {{ source_schema }}.dim_users_latest u
      ON m.user_id = u.user_id
      GROUP BY m.created_at, m.revenue, u.home_state_latest
    ) b
    ON b.ds <= a.ds AND b.ds > {{ render_date_sub("a", "ds", 2, TimeGranularity.MONTH) }}
    WHERE {{ render_time_constraint("a.ds", "2020-03-05", "2021-01-04") }}
    GROUP BY a.ds, user__home_state_latest
    ORDER by a.ds, user__home_state_latest
---
integration_test:
  name: cumulative_metric_by_ds
  description: Query a cumulative metric that aggregates revenue for all time in the past by ds.
  model: SIMPLE_MODEL
  metrics: ["revenue_all_time"]
  group_bys: ["metric_time"]
  order_bys: ["metric_time"]
  time_constraint: ["2020-03-01", "2021-01-05"]
  check_query: |
    SELECT
      SUM(revenue) AS revenue_all_time
      , a.ds AS metric_time__day
    FROM (
      SELECT ds
      FROM {{ mf_time_spine_source }}
      WHERE {{ render_time_constraint("ds", "2020-03-01", "2021-01-05") }}
    ) a
    INNER JOIN (
      SELECT
        revenue
        , created_at
      FROM {{ source_schema }}.fct_revenue
    ) b
    ON b.created_at <= a.ds
    GROUP BY a.ds
    ORDER by a.ds
---
integration_test:
  name: cumulative_metric_without_ds
  description: Query a cumulative metric that aggregates revenue for all time in the past.
  model: SIMPLE_MODEL
  metrics: ["revenue_all_time"]
  check_query: |
    SELECT
      SUM(revenue) AS revenue_all_time
    FROM {{ source_schema }}.fct_revenue
---
integration_test:
  name: multiple_cumulative_metrics
  description: Query two different cumulative metrics.
  model: SIMPLE_MODEL
  metrics: ["revenue_all_time", "trailing_2_months_revenue"]
  group_bys: ["metric_time"]
  order_bys: ["metric_time"]
  time_constraint: ["2020-03-31", "2021-01-05"]
  check_query: |
    SELECT revenue_all_time, trailing_2_months_revenue, a.ds AS metric_time__day
    FROM (
        SELECT
          SUM(revenue) as revenue_all_time
          , ds
        FROM (
            SELECT
                b.revenue as revenue
                , a.ds AS ds
            FROM (
              SELECT ds
              FROM {{ mf_time_spine_source }}
              WHERE {{ render_time_constraint("ds", "2020-03-31", "2021-01-05") }}
            ) a
            INNER JOIN (
              SELECT
                revenue
                , created_at
              FROM {{ source_schema }}.fct_revenue
            ) b
            ON b.created_at <= a.ds
        ) a
        GROUP BY ds
    ) a
    FULL OUTER JOIN (
        SELECT
          SUM(b.txn_revenue) as trailing_2_months_revenue
          , a.ds
        FROM (
          SELECT ds
          FROM {{ mf_time_spine_source }}
          WHERE {{ render_time_constraint("ds", "2020-01-31", "2021-01-05") }}
        ) a
        INNER JOIN (
            SELECT
              revenue as txn_revenue
              , created_at AS ds
            FROM {{ source_schema }}.fct_revenue
        ) b
        ON b.ds <= a.ds AND b.ds > {{ render_date_sub("a", "ds", 2, TimeGranularity.MONTH) }}
        GROUP BY a.ds
    ) b
    ON a.ds = b.ds
    WHERE {{ render_time_constraint("a.ds", "2020-03-31", "2021-01-05") }}
    ORDER BY a.ds
---
integration_test:
  name: windowed_cumulative_metric_by_time_dimension_with_granularity
  description: Query a windowed cumulative metric by a time dimension with the granularity suffix.
  model: SIMPLE_MODEL
  metrics: ["trailing_2_months_revenue"]
  group_bys: ["metric_time__day"]
  order_bys: ["metric_time__day"]
  time_constraint: ["2020-03-05", "2021-01-04"]
  check_query: |
    SELECT
      SUM(b.txn_revenue) as trailing_2_months_revenue
      , a.ds AS metric_time__day
    FROM (
      SELECT ds
      FROM {{ mf_time_spine_source }}
      WHERE {{ render_time_constraint("ds", "2020-01-05", "2021-01-04") }}
    ) a
    INNER JOIN (
      SELECT
        revenue as txn_revenue
        , created_at AS ds
      FROM {{ source_schema }}.fct_revenue
    ) b
    ON b.ds <= a.ds AND b.ds > {{ render_date_sub("a", "ds", 2, TimeGranularity.MONTH) }}
    WHERE {{ render_time_constraint("a.ds", "2020-03-05", "2021-01-04") }}
    GROUP BY a.ds
    ORDER BY a.ds
---
integration_test:
  name: cumulative_metric_by_ds_and_limited_time
  description: Query a cumulative metric that aggregates revenue for all time in the past for a limit time interval.
  model: SIMPLE_MODEL
  metrics: ["revenue_all_time"]
  group_bys: ["metric_time"]
  order_bys: ["metric_time"]
  time_constraint: ["2021-01-05", "2021-01-05"]
  check_query: |
    SELECT
      SUM(revenue) AS revenue_all_time
      , a.ds AS metric_time__day
    FROM (
      SELECT ds
      FROM {{ mf_time_spine_source }}
      WHERE {{ render_time_constraint("ds", "2021-01-05", "2021-01-05") }}
    ) a
    INNER JOIN (
      SELECT
        revenue
        , created_at
      FROM {{ source_schema }}.fct_revenue
    ) b
    ON b.created_at <= a.ds
    GROUP BY a.ds
    ORDER by a.ds
---
integration_test:
  name: non_additive_cumulative_metric_by_ds
  description: Query a cumulative metric with a non-additive measure.
  model: SIMPLE_MODEL
  metrics: ["every_two_days_bookers"]
  group_bys: ["metric_time"]
  order_bys: ["metric_time"]
  time_constraint: ["2019-12-31", "2020-01-04"]
  check_query: |
    SELECT
      COUNT (DISTINCT(b.guest_id)) as every_two_days_bookers
      , a.ds AS metric_time__day
    FROM (
      SELECT ds
      FROM {{ mf_time_spine_source }}
      WHERE {{ render_time_constraint("ds", "2019-12-30", "2020-01-04") }}
    ) a
    INNER JOIN (
        SELECT
          guest_id
          , ds
        FROM {{ source_schema }}.fct_bookings
    ) b
    ON b.ds <= a.ds AND b.ds > {{ render_date_sub("a", "ds", 2, TimeGranularity.DAY) }}
    GROUP BY a.ds
    ORDER BY a.ds
---
integration_test:
  name: non_additive_cumulative_metric_by_ds_and_limited_time
  description: Query a cumulative metric with a non-additive measure and a limited time range.
  model: SIMPLE_MODEL
  metrics: ["every_two_days_bookers"]
  group_bys: ["metric_time"]
  order_bys: ["metric_time"]
  time_constraint: ["2020-01-03", "2020-01-03"]
  check_query: |
    SELECT
      COUNT (DISTINCT(b.guest_id)) as every_two_days_bookers
      , a.ds AS metric_time__day
    FROM (
      SELECT ds
      FROM {{ mf_time_spine_source }}
      WHERE {{ render_time_constraint("ds", "2020-01-02", "2020-01-03") }}
    ) a
    INNER JOIN (
        SELECT
          guest_id
          , ds
        FROM {{ source_schema }}.fct_bookings
    ) b
    ON b.ds <= a.ds AND b.ds > {{ render_date_sub("a", "ds", 2, TimeGranularity.DAY) }}
    WHERE {{ render_time_constraint("a.ds", "2020-01-03", "2020-01-03") }}
    GROUP BY a.ds
    ORDER BY a.ds
---
integration_test:
  name: grain_to_date_cumulative_metric
  description: Query a cumulative metric with a non-additive measure and a limited time range.
  model: SIMPLE_MODEL
  metrics: ["revenue_mtd"]
  group_bys: ["metric_time"]
  order_bys: ["metric_time"]
  time_constraint: ["2021-01-04", "2021-01-05"]
  check_query: |
    SELECT
      SUM(b.txn_revenue) as revenue_mtd
      , a.ds AS metric_time__day
    FROM (
      SELECT ds
      FROM {{ mf_time_spine_source }}
      WHERE {{ render_time_constraint("ds", "2021-01-01", "2021-01-05") }}
    ) a
    INNER JOIN (
        SELECT
          revenue as txn_revenue
          , created_at AS ds
        FROM {{ source_schema }}.fct_revenue
    ) b
    ON b.ds <= a.ds AND b.ds >= {{ render_date_trunc("a.ds", TimeGranularity.MONTH) }}
    WHERE {{ render_time_constraint("a.ds", "2021-01-04", "2021-01-05") }}
    GROUP BY a.ds
    ORDER BY a.ds
---
integration_test:
  name: cumulative_metric_by_ds_with_granularity
  description: Query a cumulative metric that aggregates revenue for all time in the past by ds__day.
  model: SIMPLE_MODEL
  metrics: ["revenue_all_time"]
  group_bys: ["metric_time__day"]
  order_bys: ["metric_time__day"]
  time_constraint: ["2020-01-01", "2021-01-05"]
  check_query: |
    SELECT
      SUM(revenue) AS revenue_all_time
      , a.ds AS metric_time__day
    FROM (
      SELECT ds
      FROM {{ mf_time_spine_source }}
      WHERE {{ render_time_constraint("ds", "2020-01-01", "2021-01-05") }}
    ) a
    INNER JOIN (
      SELECT
        revenue
        , created_at
      FROM {{ source_schema }}.fct_revenue
    ) b
    ON b.created_at <= a.ds
    GROUP BY a.ds
    ORDER by a.ds
---
integration_test:
  name: cumulative_metric_with_non_adjustable_filter
  description: Query a cumulative metric that has a time filter which cannot be adapted to cover the full input range
  model: SIMPLE_MODEL
  metrics: ["every_two_days_bookers"]
  group_bys: ["metric_time__day"]
  order_bys: ["metric_time__day"]
  where_filter: |
    {{ render_time_dimension_template('metric_time', 'day') }} = {{ cast_to_ts('2019-12-20') }}
      or {{ render_time_dimension_template('metric_time', 'day') }} = {{ cast_to_ts('2020-01-04') }}
  check_query: |
    SELECT
      COUNT (DISTINCT(b.guest_id)) as every_two_days_bookers
      , a.ds AS metric_time__day
    FROM (
      SELECT ds
      FROM {{ mf_time_spine_source }}
      WHERE {{ render_time_constraint("ds", "2019-12-19", "2020-01-04") }}
    ) a
    INNER JOIN (
        SELECT
          guest_id
          , ds
        FROM {{ source_schema }}.fct_bookings
    ) b
    ON b.ds <= a.ds AND b.ds > {{ render_date_sub("a", "ds", 2, TimeGranularity.DAY) }}
    WHERE {{ render_time_constraint("a.ds", "2019-12-20", "2019-12-20") }}
      OR {{ render_time_constraint("a.ds", "2020-01-04", "2020-01-04") }}
    GROUP BY a.ds
    ORDER BY a.ds
