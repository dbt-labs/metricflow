---
integration_test:
  name: conversion_rate_metric
  description: Query a conversion metric that calculates the conversion rate
  model: SIMPLE_MODEL
  metrics: ["visit_buy_conversion_rate"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      opportunities.metric_time AS metric_time
      , CAST(conversions.buys AS DOUBLE) / CAST(NULLIF(opportunities.visits, 0) AS DOUBLE) AS visit_buy_conversion_rate
    FROM (
      SELECT
        metric_time, SUM(a.visits) AS visits
      FROM (
        SELECT
          ds AS metric_time, 1 AS visits
        FROM {{ source_schema }}.fct_visits visits
      ) a
      GROUP BY
        a.metric_time
    ) opportunities
    INNER JOIN (
      SELECT
        b.ds AS metric_time, SUM(b.buys) AS buys
      FROM (
        SELECT DISTINCT
        first_value(v.ds) OVER (PARTITION BY buy_source.ds, buy_source.user_id ORDER BY v.ds DESC NULLS FIRST) AS ds
        , first_value(v.user_id) OVER (PARTITION BY buy_source.ds, buy_source.user_id ORDER BY v.ds DESC NULLS FIRST) AS user_id
        , first_value(v.referrer_id) OVER (PARTITION BY buy_source.ds, buy_source.user_id ORDER BY v.ds DESC NULLS FIRST) AS referrer_id
        , buy_source.uuid
        , 1 AS buys
        FROM {{ source_schema }}.fct_visits v
        INNER JOIN
        (
          SELECT *, {{ generate_random_uuid() }} AS uuid FROM {{ source_schema }}.fct_buys
        ) buy_source
        ON
          v.user_id = buy_source.user_id AND v.ds <= buy_source.ds AND v.ds > buy_source.ds - INTERVAL 7 day
      ) b
      GROUP BY
        b.ds
    ) conversions
    ON opportunities.metric_time = conversions.metric_time
---
integration_test:
  name: conversion_rate_metric_with_dimension
  description: Query a conversion metric that calculates the conversion rate without time dimension
  model: SIMPLE_MODEL
  metrics: ["visit_buy_conversion_rate"]
  group_bys: ["referrer_id"]
  check_query: |
    SELECT
      opportunities.referrer_id AS referrer_id
      , CAST(conversions.buys AS DOUBLE) / CAST(NULLIF(opportunities.visits, 0) AS DOUBLE) AS visit_buy_conversion_rate
    FROM (
      SELECT
        referrer_id, SUM(a.visits) AS visits
      FROM (
        SELECT
          referrer_id, 1 AS visits
        FROM {{ source_schema }}.fct_visits visits
      ) a
      GROUP BY
        a.referrer_id
    ) opportunities
    INNER JOIN (
      SELECT
        referrer_id AS referrer_id, SUM(b.buys) AS buys
      FROM (
        SELECT DISTINCT
        first_value(v.ds) OVER (PARTITION BY buy_source.ds, buy_source.user_id ORDER BY v.ds DESC NULLS FIRST) AS ds
        , first_value(v.user_id) OVER (PARTITION BY buy_source.ds, buy_source.user_id ORDER BY v.ds DESC NULLS FIRST) AS user_id
        , first_value(v.referrer_id) OVER (PARTITION BY buy_source.ds, buy_source.user_id ORDER BY v.ds DESC NULLS FIRST) AS referrer_id
        , buy_source.uuid
        , 1 AS buys
        FROM {{ source_schema }}.fct_visits v
        INNER JOIN
        (
          SELECT *, {{ generate_random_uuid() }} AS uuid FROM {{ source_schema }}.fct_buys
        ) buy_source
        ON
          v.user_id = buy_source.user_id AND v.ds <= buy_source.ds AND v.ds > buy_source.ds - INTERVAL 7 day
      ) b
      GROUP BY
        b.referrer_id
    ) conversions
    ON opportunities.referrer_id = conversions.referrer_id
---
integration_test:
  name: conversion_rate_metric_with_multiple_dimension
  description: Query a conversion metric that calculates the conversion rate with multiple dimension
  model: SIMPLE_MODEL
  metrics: ["visit_buy_conversion_rate"]
  group_bys: ["metric_time", "referrer_id"]
  check_query: |
    SELECT
      opportunities.referrer_id AS referrer_id
      , opportunities.metric_time AS metric_time
      , CAST(conversions.buys AS DOUBLE) / CAST(NULLIF(opportunities.visits, 0) AS DOUBLE) AS visit_buy_conversion_rate
    FROM (
      SELECT
        metric_time, referrer_id, SUM(a.visits) AS visits
      FROM (
        SELECT
          ds AS metric_time, referrer_id, 1 AS visits
        FROM {{ source_schema }}.fct_visits visits
      ) a
      GROUP BY
        a.referrer_id, a.metric_time
    ) opportunities
    INNER JOIN (
      SELECT
        b.ds AS metric_time, referrer_id AS referrer_id, SUM(b.buys) AS buys
      FROM (
        SELECT DISTINCT
        first_value(v.ds) OVER (PARTITION BY buy_source.ds, buy_source.user_id ORDER BY v.ds DESC NULLS FIRST) AS ds
        , first_value(v.user_id) OVER (PARTITION BY buy_source.ds, buy_source.user_id ORDER BY v.ds DESC NULLS FIRST) AS user_id
        , first_value(v.referrer_id) OVER (PARTITION BY buy_source.ds, buy_source.user_id ORDER BY v.ds DESC NULLS FIRST) AS referrer_id
        , buy_source.uuid
        , 1 AS buys
        FROM {{ source_schema }}.fct_visits v
        INNER JOIN
        (
          SELECT *, {{ generate_random_uuid() }} AS uuid FROM {{ source_schema }}.fct_buys
        ) buy_source
        ON
          v.user_id = buy_source.user_id AND v.ds <= buy_source.ds AND v.ds > buy_source.ds - INTERVAL 7 day
      ) b
      GROUP BY
        b.referrer_id, b.ds
    ) conversions
    ON opportunities.referrer_id = conversions.referrer_id AND opportunities.metric_time = conversions.metric_time
---
integration_test:
  name: conversion_count_metric
  description: Query a conversion metric that calculates the conversion count
  model: SIMPLE_MODEL
  metrics: ["visit_buy_conversions"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      conversions.metric_time AS metric_time
      , conversions.buys AS visit_buy_conversions
    FROM (
      SELECT
        b.ds AS metric_time, SUM(b.buys) AS buys
      FROM (
        SELECT DISTINCT
        first_value(v.ds) OVER (PARTITION BY buy_source.ds, buy_source.user_id ORDER BY v.ds DESC NULLS FIRST) AS ds
        , first_value(v.user_id) OVER (PARTITION BY buy_source.ds, buy_source.user_id ORDER BY v.ds DESC NULLS FIRST) AS user_id
        , first_value(v.referrer_id) OVER (PARTITION BY buy_source.ds, buy_source.user_id ORDER BY v.ds DESC NULLS FIRST) AS referrer_id
        , buy_source.uuid
        , 1 AS buys
        FROM {{ source_schema }}.fct_visits v
        INNER JOIN
        (
          SELECT *, {{ generate_random_uuid() }} AS uuid FROM {{ source_schema }}.fct_buys
        ) buy_source
        ON
          v.user_id = buy_source.user_id AND v.ds <= buy_source.ds AND v.ds > buy_source.ds - INTERVAL 7 day
      ) b
      GROUP BY
        b.ds
    ) conversions
---
integration_test:
  name: conversion_count_metric_with_dimension
  description: Query a conversion metric that calculates the conversion count without time dimension
  model: SIMPLE_MODEL
  metrics: ["visit_buy_conversions"]
  group_bys: ["referrer_id"]
  check_query: |
    SELECT
      conversions.referrer_id AS referrer_id
      , conversions.buys AS visit_buy_conversions
    FROM (
      SELECT
        referrer_id AS referrer_id, SUM(b.buys) AS buys
      FROM (
        SELECT DISTINCT
        first_value(v.ds) OVER (PARTITION BY buy_source.ds, buy_source.user_id ORDER BY v.ds DESC NULLS FIRST) AS ds
        , first_value(v.user_id) OVER (PARTITION BY buy_source.ds, buy_source.user_id ORDER BY v.ds DESC NULLS FIRST) AS user_id
        , first_value(v.referrer_id) OVER (PARTITION BY buy_source.ds, buy_source.user_id ORDER BY v.ds DESC NULLS FIRST) AS referrer_id
        , buy_source.uuid
        , 1 AS buys
        FROM {{ source_schema }}.fct_visits v
        INNER JOIN
        (
          SELECT *, {{ generate_random_uuid() }} AS uuid FROM {{ source_schema }}.fct_buys
        ) buy_source
        ON
          v.user_id = buy_source.user_id AND v.ds <= buy_source.ds AND v.ds > buy_source.ds - INTERVAL 7 day
      ) b
      GROUP BY
        b.referrer_id
    ) conversions
---
integration_test:
  name: conversion_count_metric_with_multiple_dimension
  description: Query a conversion metric that calculates the conversion count with multiple dimension
  model: SIMPLE_MODEL
  metrics: ["visit_buy_conversions"]
  group_bys: ["metric_time", "referrer_id"]
  check_query: |
    SELECT
      conversions.referrer_id AS referrer_id
      , conversions.metric_time AS metric_time
      , conversions.buys AS visit_buy_conversions
    FROM (
      SELECT
        b.ds AS metric_time, referrer_id AS referrer_id, SUM(b.buys) AS buys
      FROM (
        SELECT DISTINCT
        first_value(v.ds) OVER (PARTITION BY buy_source.ds, buy_source.user_id ORDER BY v.ds DESC NULLS FIRST) AS ds
        , first_value(v.user_id) OVER (PARTITION BY buy_source.ds, buy_source.user_id ORDER BY v.ds DESC NULLS FIRST) AS user_id
        , first_value(v.referrer_id) OVER (PARTITION BY buy_source.ds, buy_source.user_id ORDER BY v.ds DESC NULLS FIRST) AS referrer_id
        , buy_source.uuid
        , 1 AS buys
        FROM {{ source_schema }}.fct_visits v
        INNER JOIN
        (
          SELECT *, {{ generate_random_uuid() }} AS uuid FROM {{ source_schema }}.fct_buys
        ) buy_source
        ON
          v.user_id = buy_source.user_id AND v.ds <= buy_source.ds AND v.ds > buy_source.ds - INTERVAL 7 day
      ) b
      GROUP BY
        b.referrer_id, b.ds
    ) conversions
