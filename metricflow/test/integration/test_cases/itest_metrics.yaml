---
integration_test:
  name: simple_expr_metric
  description: Test for expr metric
  model: SIMPLE_MODEL
  metrics: ["booking_fees"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      SUM(booking_value) * 0.05 AS booking_fees
      , ds AS metric_time
    FROM {{ source_schema }}.fct_bookings
    GROUP BY ds;
---
integration_test:
  name: single_data_source_expr_metric
  description: Tests querying an expression metric sourced from multiple measures, but one semantic model
  model: SIMPLE_MODEL
  metrics: ["booking_fees_per_booker"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      SUM(booking_value) * 0.05 / COUNT(DISTINCT guest_id) AS booking_fees_per_booker
      , ds AS metric_time
    FROM {{ source_schema }}.fct_bookings
    GROUP BY ds;
---
integration_test:
  name: expr_metric
  description: Tests querying an expression metric sourced from multiple measures, but one semantic model
  model: SIMPLE_MODEL
  metrics: ["views_times_booking_value"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      booking_value * views AS views_times_booking_value
      , b.ds AS metric_time
    FROM (
      SELECT
        SUM(booking_value) AS booking_value
        , ds
      FROM {{source_schema}}.fct_bookings
      GROUP BY ds
    ) b
    JOIN (
      SELECT
        SUM(1) AS views
        , ds
      FROM {{ source_schema }}.fct_views
      GROUP BY ds
    ) v
    ON b.ds = v.ds
---
integration_test:
  name: constrained_metric
  description: Test a metric with a constraint
  model: SIMPLE_MODEL
  metrics: ["instant_booking_value"]
  group_bys: ["metric_time"]
  where_filter: "{{ render_dimension_template('is_instant') }}"
  check_query: |
    SELECT
      SUM(booking_value) AS instant_booking_value
      , ds AS metric_time
    FROM {{ source_schema }}.fct_bookings
    WHERE is_instant
    GROUP BY ds
---
integration_test:
  name: constrained_metric_with_non_constrained_metric_same_source
  description: Testing querying a constrained metric and a non-constrained metric, but sharing a common measure.
  model: SIMPLE_MODEL
  required_features: ["FULL_OUTER_JOIN"]
  metrics: ["booking_value", "instant_booking_value"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      booking_value
      , instant_booking_value
      , a.ds AS metric_time
    FROM (
      SELECT
        SUM(booking_value) AS booking_value
        , ds
      FROM {{ source_schema }}.fct_bookings
      GROUP BY ds
    ) a
    FULL OUTER JOIN (
      SELECT
        SUM(booking_value) AS instant_booking_value
        , ds
      FROM {{ source_schema }}.fct_bookings
      WHERE is_instant
      GROUP BY ds
    ) b
    ON a.ds = b.ds
---
integration_test:
  name: constrained_metric_with_non_constrained_metric_diff_source
  description: Query both a constrained and non-constrained metric.
  model: SIMPLE_MODEL
  required_features: ["FULL_OUTER_JOIN"]
  metrics: ["instant_booking_value", "views"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT instant_booking_value, views, a.ds AS metric_time
    FROM (
      SELECT
        SUM(booking_value) AS instant_booking_value
      , ds
      FROM {{ source_schema }}.fct_bookings
      WHERE is_instant
      GROUP BY ds
    ) a
    FULL OUTER JOIN (
      SELECT
        SUM(1) AS views
        , ds
      FROM {{ source_schema }}.fct_views
      GROUP BY ds
    ) b
    ON a.ds = b.ds
---
integration_test:
  name: identifier_constrained_metric
  description: Query a metric with a an identifier constraint.
  model: SIMPLE_MODEL
  metrics: ["booking_value_for_non_null_listing_id"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      SUM(booking_value) AS booking_value_for_non_null_listing_id
      , ds AS metric_time
    FROM {{ source_schema }}.fct_bookings
    WHERE listing_id IS NOT NULL
    GROUP BY ds
---
integration_test:
  name: dundered_dimension_thats_local
  description: Test metric with local dimensions
  model: SIMPLE_MODEL
  metrics: ["lux_listings"]
  group_bys: ["listing__country_latest"]
  where_filter: "{{ render_dimension_template('country_latest', entity_path=['listing']) }} = 'us'"
  check_query: |
    SELECT
      SUM(1) AS lux_listings
      , country as listing__country_latest
    FROM {{ source_schema }}.dim_listings_latest
    WHERE
      country='us'
      AND is_lux
    GROUP BY country
---
integration_test:
  name: constrained_metric_with_user_input_constraint
  description: Test metric constrained by metrics definition and a user input
  model: SIMPLE_MODEL
  metrics: ["instant_booking_value"]
  group_bys: ["metric_time"]
  where_filter: "{{ render_dimension_template('is_lux_latest', entity_path=['listing']) }}"
  check_query: |
    SELECT
      SUM(b.booking_value) AS instant_booking_value
      , b.ds AS metric_time
    FROM {{ source_schema }}.fct_bookings b
    LEFT OUTER JOIN {{ source_schema }}.dim_listings_latest l
      ON l.listing_id = b.listing_id
    WHERE
      b.is_instant
      AND l.is_lux
    GROUP BY b.ds
---
integration_test:
  name: same_measure_constrained_metric
  description: |
    Query metrics based on the same measure, but where one is constrained. Uses a FULL OUTER JOIN in the check query to
    produce NULL values correctly.
  model: SIMPLE_MODEL
  required_features: ["FULL_OUTER_JOIN"]
  metrics: ["booking_value", "instant_booking_value"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      a.booking_value
      , b.instant_booking_value
      , COALESCE(a.ds, b.ds) AS metric_time
    FROM (
      SELECT
        SUM(booking_value) AS booking_value
        , ds
      FROM {{ source_schema }}.fct_bookings
      GROUP BY ds
    ) a
    FULL OUTER JOIN (
      SELECT
        SUM(booking_value) AS instant_booking_value
        , ds
      FROM {{ source_schema }}.fct_bookings
      WHERE is_instant
      GROUP BY ds
    ) b
    ON a.ds = b.ds
---
integration_test:
  name: min_measure_proxy
  description: Test measure_proxy metric with a min.
  model: SIMPLE_MODEL
  metrics: ["min_booking_value"]
  group_bys: []
  check_query: |
    SELECT
      min(booking_value) AS min_booking_value
    FROM {{ source_schema }}.fct_bookings
---
integration_test:
  name: max_measure_proxy
  description: Test measure_proxy metric with a max.
  model: SIMPLE_MODEL
  metrics: ["max_booking_value"]
  group_bys: []
  check_query: |
    SELECT
      max(booking_value) AS max_booking_value
    FROM {{ source_schema }}.fct_bookings
---
integration_test:
  name: count_distinct
  description: Test count_distinct metric.
  model: SIMPLE_MODEL
  metrics: ["bookers"]
  group_bys: ["metric_time", "is_instant"]
  check_query: |
    SELECT
      COUNT(DISTINCT guest_id) AS bookers
      , is_instant
      , ds AS metric_time
    FROM {{ source_schema }}.fct_bookings
    GROUP BY
      is_instant
      , ds
---
integration_test:
  name: count_distinct_with_constraint
  description: Test count_distinct metric with a constraint.
  model: SIMPLE_MODEL
  metrics: ["bookers"]
  group_bys: ["metric_time"]
  where_filter: "{{ render_dimension_template('is_instant') }}"
  check_query: |
    SELECT
      COUNT(DISTINCT guest_id) AS bookers
      , ds AS metric_time
    FROM {{ source_schema }}.fct_bookings
    where is_instant
    GROUP BY
      ds
---
integration_test:
  name: ratio_single_data_source
  description: Test ratio metric from a single semantic model.
  model: SIMPLE_MODEL
  metrics: ["bookings_per_booker"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      CAST(SUM(1) AS {{ double_data_type_name }}) / COUNT(DISTINCT guest_id) AS bookings_per_booker
      , ds AS metric_time
    FROM {{ source_schema }}.fct_bookings
    GROUP BY ds
---
integration_test:
  name: ratio
  description: Test ratio metric from multiple semantic model.
  model: SIMPLE_MODEL
  metrics: ["bookings_per_view"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      CAST(bookings AS {{ double_data_type_name }}) / NULLIF(views, 0) AS bookings_per_view
      , groupby_8cbdaa28.ds AS metric_time
    FROM (
      SELECT
        COUNT(*) AS bookings
        , ds
      FROM {{ source_schema }}.fct_bookings
      GROUP BY
        ds
    ) groupby_8cbdaa28
    JOIN (
      SELECT
        SUM(1) AS views
        , ds
      FROM {{ source_schema }}.fct_views
      GROUP BY
        ds
    ) groupby_68058b0b
    ON
    groupby_8cbdaa28.ds = groupby_68058b0b.ds
---
integration_test:
  name: ratio_sort
  description: Test ratio metric with a sort.
  model: SIMPLE_MODEL
  metrics: ["bookings_per_booker"]
  group_bys: ["metric_time"]
  order_bys: ["metric_time"]
  check_query: |
    SELECT
      CAST(SUM(1) AS {{ double_data_type_name }}) / COUNT(DISTINCT guest_id) AS bookings_per_booker
      , ds AS metric_time
    FROM {{ source_schema }}.fct_bookings
    GROUP BY ds
    ORDER BY ds
---
integration_test:
  name: ratio_with_zero_denominator
  description: Test ratio metric with a zero in the denominator.
  model: SIMPLE_MODEL
  metrics: ["bookings_per_dollar"]
  group_bys: ["metric_time"]
  time_constraint: ["2020-01-03", "2020-01-03"]
  check_query: |
    SELECT
      CAST(bookings AS {{ double_data_type_name }}) / NULLIF(booking_value, 0) AS bookings_per_dollar
      , bookings_source.ds AS metric_time
    FROM (
      SELECT
        SUM(1) AS bookings
        , SUM(booking_value) AS booking_value
        , ds
      FROM {{ source_schema }}.fct_bookings
      GROUP BY
        ds
    ) bookings_source
    WHERE {{ render_time_constraint("ds", "2020-01-03", "2020-01-03") }}
---
integration_test:
  name: ratio_primary_ident
  description: Test ratio metric joined on primary identifier.
  model: SIMPLE_MODEL
  metrics: ["bookings_per_listing"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      CAST(bookings AS {{ double_data_type_name }}) / NULLIF(listings, 0) AS bookings_per_listing
      , groupby_8cbdaa28.ds AS metric_time
    FROM (
      SELECT
        COUNT(*) AS bookings
        , ds
      FROM {{ source_schema }}.fct_bookings
      GROUP BY
        ds
    ) groupby_8cbdaa28
    JOIN (
      SELECT
        SUM(1) AS listings
        , created_at AS ds
      FROM {{ source_schema }}.dim_listings_latest
      GROUP BY
        created_at
    ) groupby_68058b0b
    ON
    groupby_8cbdaa28.ds = groupby_68058b0b.ds
---
integration_test:
  name: metrics_with_different_dimension_values
  description: Test querying two metrics with a different primary date dimension.
  model: SIMPLE_MODEL
  required_features: ["FULL_OUTER_JOIN"]
  metrics: ["bookings", "views"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      views
      , bookings
      , COALESCE(a.ds, b.ds) AS metric_time
    FROM (
        SELECT
          SUM(1) AS views
          , ds
        FROM {{ source_schema }}.fct_views
        GROUP BY ds

    ) a
    FULL OUTER JOIN (
        SELECT
          SUM(1) AS bookings
          , ds
        FROM {{ source_schema }}.fct_bookings
        GROUP BY ds
    ) b
    ON a.ds = b.ds
---
integration_test:
  name: ratio_with_non_ratio
  description: Test ratio metric with a non ratio metric with the same measure.
  model: SIMPLE_MODEL
  required_features: ["FULL_OUTER_JOIN"]
  metrics: ["bookings", "bookings_per_view"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      bookings,
      CAST(bookings AS {{ double_data_type_name }}) / NULLIF(views, 0) AS bookings_per_view
      , COALESCE(a.ds, b.ds) AS metric_time
    FROM (
      SELECT
        COUNT(*) AS bookings
        , ds
      FROM {{ source_schema }}.fct_bookings
      GROUP BY
        ds
    ) a
    FULL OUTER JOIN (
      SELECT
        SUM(1) AS views
        , ds
      FROM {{ source_schema }}.fct_views
      GROUP BY
        ds
    ) b
    ON
    a.ds = b.ds
---
integration_test:
  name: query_with_3_metrics
  description: |
    Tests query with 3 metrics, and also checks an optimizing issue when there is a expression metric that is joined.
  model: SIMPLE_MODEL
  required_features: ["FULL_OUTER_JOIN"]
  metrics: ["bookings", "bookings_per_booker", "booking_value"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      SUM(1) AS bookings
      , CAST(SUM(1) AS {{ double_data_type_name }}) / COUNT(DISTINCT guest_id) AS bookings_per_booker
      , SUM(booking_value) AS booking_value
      , ds AS metric_time
    FROM {{ source_schema }}.fct_bookings
    GROUP BY
      ds
---
integration_test:
  name: metric_with_aggregation_time_dimension_specified.
  description: |
    Tests a query for a metric based on a measure that has the aggregation time dimension specified.
  model: SIMPLE_MODEL
  metrics: ["booking_payments"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      SUM(booking_value) AS booking_payments
      , booking_paid_at AS metric_time
    FROM {{ source_schema }}.fct_bookings
    GROUP BY
      booking_paid_at
---
integration_test:
  name: metrics_with_different_aggregation_time_dimensions
  description: |
    Tests querying multiple metrics based on different aggregation time dimensions
  model: SIMPLE_MODEL
  required_features: ["FULL_OUTER_JOIN"]
  metrics: ["booking_value", "booking_payments"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      booking_value
      , booking_payments
      , COALESCE(a.metric_time, b.metric_time) AS metric_time
    FROM (
      SELECT
        SUM(booking_value) AS booking_value
        , ds AS metric_time
      FROM {{ source_schema }}.fct_bookings
      GROUP BY
        ds
    ) a
    FULL OUTER JOIN (
      SELECT
        SUM(booking_value) AS booking_payments
        , booking_paid_at AS metric_time
      FROM {{ source_schema }}.fct_bookings
      GROUP BY
        booking_paid_at
    ) b
    ON a.metric_time = b.metric_time
---
integration_test:
  name: derived_metric
  description: Tests a derived metric query
  model: SIMPLE_MODEL
  metrics: ["non_referred_bookings_pct"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      (bookings - ref_bookings) / CAST(bookings AS {{ double_data_type_name }}) AS non_referred_bookings_pct
      , metric_time
    FROM (
      SELECT
        SUM(CASE WHEN referrer_id IS NOT NULL THEN 1 ELSE 0 END) AS ref_bookings
        , SUM(1) AS bookings
        , ds AS metric_time
      FROM {{ source_schema }}.fct_bookings
      GROUP BY
        ds
    ) a
---
integration_test:
  name: derived_metric_ratio
  description: Tests a ratio metric defined as a derived metric
  model: SIMPLE_MODEL
  metrics: ["bookings_per_lux_listing_derived"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      bookings / CAST(NULLIF(lux_listings, 0) AS {{ double_data_type_name }}) AS bookings_per_lux_listing_derived
      , a.metric_time
    FROM (
      SELECT
        SUM(1) AS bookings
        , ds AS metric_time
      FROM {{ source_schema }}.fct_bookings
      GROUP BY
        ds
    ) a
    INNER JOIN (
      SELECT
        SUM(1) AS lux_listings
        , created_at AS metric_time
      FROM {{ source_schema }}.dim_listings_latest
      WHERE is_lux
      GROUP BY
        created_at
    ) b
    ON a.metric_time = b.metric_time
---
integration_test:
  name: nested_derived_metric
  description: Tests a nested derived metric
  model: SIMPLE_MODEL
  metrics: ["instant_plus_non_referred_bookings_pct"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      (instant_bookings / CAST(bookings AS {{ double_data_type_name }})) + ((bookings - ref_bookings) / CAST(bookings AS {{ double_data_type_name }})) AS instant_plus_non_referred_bookings_pct
      , metric_time
    FROM (
      SELECT
        SUM(CASE WHEN referrer_id IS NOT NULL THEN 1 ELSE 0 END) AS ref_bookings
        , SUM(CASE WHEN is_instant THEN 1 ELSE 0 END) AS instant_bookings
        , SUM(1) AS bookings
        , ds AS metric_time
      FROM {{ source_schema }}.fct_bookings
      GROUP BY
        ds
    ) a
---
integration_test:
  name: two_metrics_with_null_dimension_values
  description: Tests querying two metrics with a dimension having a NULL values
  model: SIMPLE_MODEL
  metrics: ["bookings", "views"]
  group_bys:
    ["metric_time", "listing__is_lux_latest", "listing__country_latest"]
  check_query: |
    SELECT
      MAX(bk.bookings) AS bookings
      ,MAX(vw.views) AS views
      ,COALESCE(bk.metric_time, vw.metric_time) AS metric_time
      ,COALESCE(bk.is_lux, vw.is_lux) AS listing__is_lux_latest
      ,COALESCE(bk.country, vw.country) AS listing__country_latest
    FROM (
      SELECT
        a.ds AS metric_time
        ,b.is_lux
        ,b.country
        ,SUM(1) AS bookings
      FROM {{ source_schema }}.fct_bookings a
      LEFT OUTER JOIN {{ source_schema }}.dim_listings_latest b
      ON a.listing_id = b.listing_id
      GROUP BY 1,2,3
    ) bk
    FULL OUTER JOIN (
      SELECT
        c.ds AS metric_time
        ,d.is_lux
        ,d.country
        ,SUM(1) AS views
        FROM {{ source_schema }}.fct_views c
        LEFT OUTER JOIN {{ source_schema }}.dim_listings_latest d
        ON c.listing_id = d.listing_id
        GROUP BY 1,2,3
    ) vw
    ON bk.metric_time = vw.metric_time AND bk.is_lux = vw.is_lux AND bk.country = vw.country
    GROUP BY 3,4,5
---
integration_test:
  name: three_metrics_with_null_dimension_values
  description: Tests querying three metrics with a dimension having NULL values and the on clause COALESCE behavior
  model: SIMPLE_MODEL
  metrics: ["bookings", "views", "listings"]
  group_bys: ["listing__is_lux_latest", "listing__country_latest"]
  check_query: |
    SELECT
      MAX(bk.bookings) AS bookings
      ,MAX(vw.views) AS views
      ,MAX(li.listings) AS listings
      ,COALESCE(bk.is_lux, vw.is_lux, li.is_lux) AS listing__is_lux_latest
      ,COALESCE(bk.country, vw.country, li.country) AS listing__country_latest
    FROM (
      SELECT
        b.is_lux
        ,b.country
        ,SUM(1) AS bookings
      FROM {{ source_schema }}.fct_bookings a
      LEFT OUTER JOIN {{ source_schema }}.dim_listings_latest b
      ON a.listing_id = b.listing_id
      GROUP BY 1,2
    ) bk
    FULL OUTER JOIN (
      SELECT
        d.is_lux
        ,d.country
        ,SUM(1) AS views
        FROM {{ source_schema }}.fct_views c
        LEFT OUTER JOIN {{ source_schema }}.dim_listings_latest d
        ON c.listing_id = d.listing_id
        GROUP BY 1,2
    ) vw
    ON bk.is_lux = vw.is_lux AND bk.country = vw.country
    FULL OUTER JOIN (
      SELECT
        is_lux
        ,country
        ,SUM(1) AS listings
      FROM {{ source_schema }}.dim_listings_latest
      GROUP BY 1,2
    ) li
    ON COALESCE(bk.is_lux, vw.is_lux) = li.is_lux AND COALESCE(bk.country, vw.country) = li.country
    GROUP BY 4,5
---
integration_test:
  name: derived_metrics_with_null_dimension_values
  description: Tests querying a derived metric with multiple inputs that link to dimension(s) with null values
  model: SIMPLE_MODEL
  metrics: [booking_value_per_view]
  group_bys: [listing__is_lux_latest]
  check_query: |
    SELECT
      bk.booking_value / NULLIF(vw.views, 0) AS booking_value_per_view
      , bk.is_lux AS listing__is_lux_latest
    FROM (
      SELECT
        SUM(a.booking_value) AS booking_value
        ,b.is_lux
      FROM {{ source_schema }}.fct_bookings a
      LEFT OUTER JOIN {{ source_schema }}.dim_listings_latest b
      ON a.listing_id = b.listing_id
      GROUP BY 2
    ) bk
    INNER JOIN (
      SELECT
        SUM(1) AS views
        ,d.is_lux
      FROM {{ source_schema }}.fct_views c
      LEFT OUTER JOIN {{ source_schema }}.dim_listings_latest d
      ON c.listing_id = d.listing_id
      GROUP BY 2
    ) vw
    ON bk.is_lux = vw.is_lux OR (bk.is_lux IS NULL AND vw.is_lux IS NULL)
---
integration_test:
  name: derived_metric_with_offset_window
  description: Tests a derived metric query with an offset_window
  model: SIMPLE_MODEL
  metrics: ["bookings_growth_2_weeks"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      COALESCE(a.metric_time, b.metric_time) AS metric_time
      , bookings - bookings_2_weeks_ago AS bookings_growth_2_weeks
    FROM (
      SELECT
        ds AS metric_time
        , SUM(1) AS bookings
      FROM {{ source_schema }}.fct_bookings
      GROUP BY
        metric_time
    ) a
    INNER JOIN (
      SELECT
        c.ds AS metric_time
        , d.bookings_2_weeks_ago AS bookings_2_weeks_ago
      FROM {{ mf_time_spine_source }} c
      INNER JOIN (
        SELECT
          ds AS metric_time
          , SUM(1) AS bookings_2_weeks_ago
        FROM {{ source_schema }}.fct_bookings
        GROUP BY
          metric_time
      ) d
      ON {{ render_date_sub("C", "ds", 14, TimeGranularity.DAY) }} = d.metric_time
    ) b
    ON a.metric_time = b.metric_time
---
integration_test:
  name: derived_metric_with_offset_to_grain
  description: Tests a derived metric query with an offset_to_grain
  model: SIMPLE_MODEL
  metrics: ["bookings_growth_since_start_of_month"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      COALESCE(a.metric_time, b.metric_time) AS metric_time
      , bookings - bookings_at_start_of_month AS bookings_growth_since_start_of_month
    FROM (
      SELECT
        ds AS metric_time
        , SUM(1) AS bookings
      FROM {{ source_schema }}.fct_bookings
      GROUP BY
        metric_time
    ) a
    INNER JOIN (
      SELECT
        c.ds AS metric_time
        , d.bookings_at_start_of_month AS bookings_at_start_of_month
      FROM {{ mf_time_spine_source }} c
      INNER JOIN (
        SELECT
          ds AS metric_time
          , SUM(1) AS bookings_at_start_of_month
        FROM {{ source_schema }}.fct_bookings
        GROUP BY
          metric_time
      ) d
      ON {{ render_date_trunc("c.ds", TimeGranularity.MONTH) }} = d.metric_time
    ) b
    ON a.metric_time = b.metric_time
---
integration_test:
  name: derived_metric_with_offset_window_and_offset_to_grain
  description: Tests a derived metric query with 2 input metrics, one with an offset_window and one with an offset_to_grain
  model: SIMPLE_MODEL
  metrics: ["bookings_month_start_compared_to_1_month_prior"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      COALESCE(a.metric_time, b.metric_time) AS metric_time
      , month_start_bookings - bookings_1_month_ago AS bookings_month_start_compared_to_1_month_prior
    FROM (
      SELECT
        g.ds AS metric_time
        , f.bookings AS bookings_1_month_ago
      FROM {{ mf_time_spine_source }} g
      INNER JOIN (
        SELECT
          ds AS metric_time
          , SUM(1) AS bookings
        FROM {{ source_schema }}.fct_bookings
        GROUP BY
          metric_time
      ) f
      ON {{ render_date_sub("g", "ds", 1, TimeGranularity.MONTH) }} = f.metric_time
    ) a
    INNER JOIN (
      SELECT
        c.ds AS metric_time
        , d.bookings AS month_start_bookings
      FROM {{ mf_time_spine_source }} c
      INNER JOIN (
        SELECT
          ds AS metric_time
          , SUM(1) AS bookings
        FROM {{ source_schema }}.fct_bookings
        GROUP BY
          metric_time
      ) d
      ON {{ render_date_trunc("c.ds", TimeGranularity.MONTH) }} = d.metric_time
    ) b
    ON a.metric_time = b.metric_time
---
integration_test:
  name: derived_metric_offset_with_one_metric_input
  description: Tests a derived metric offset query with only one input metric
  model: SIMPLE_MODEL
  metrics: ["bookings_5_day_lag"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      a.ds AS metric_time
      , b.bookings_5_day_lag
    FROM {{ mf_time_spine_source }} a
    INNER JOIN (
      SELECT
        ds AS metric_time
        , SUM(1) AS bookings_5_day_lag
      FROM {{ source_schema }}.fct_bookings
      GROUP BY
        metric_time
    ) b
    ON {{ render_date_sub("a", "ds", 5, TimeGranularity.DAY) }} = b.metric_time
---
integration_test:
  name: derived_metric_with_input_metric_with_constraint
  description: |
    Tests a derived metric where the input metric has a metric constraint
  model: SIMPLE_MODEL
  metrics: ["booking_value_sub_instant"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      booking_value - instant_booking_value AS booking_value_sub_instant
      , a.metric_time
    FROM (
      SELECT
        SUM(booking_value) AS instant_booking_value
        , ds AS metric_time
      FROM {{ source_schema }}.fct_bookings
      WHERE is_instant
      GROUP BY
        ds
    ) a
    INNER JOIN (
      SELECT
        SUM(booking_value) AS booking_value
        , ds AS metric_time
      FROM {{ source_schema }}.fct_bookings
      GROUP BY
        ds
    ) b
    ON a.metric_time = b.metric_time
---
integration_test:
  name: nested_derived_metric_with_input_metric_with_constraint
  description: |
    Tests a nested derived metric where the input metric is a derived metric
    where the input_metric has a metric constraint
  model: SIMPLE_MODEL
  metrics: ["booking_value_sub_instant_add_10"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      c.booking_value_sub_instant + 10 AS booking_value_sub_instant_add_10
      , c.metric_time
    FROM (
      SELECT
        booking_value - instant_booking_value AS booking_value_sub_instant
        , a.metric_time AS metric_time
      FROM (
        SELECT
          SUM(booking_value) AS instant_booking_value
          , ds AS metric_time
        FROM {{ source_schema }}.fct_bookings
        WHERE is_instant
        GROUP BY
          ds
      ) a
      INNER JOIN (
        SELECT
          SUM(booking_value) AS booking_value
          , ds AS metric_time
        FROM {{ source_schema }}.fct_bookings
        GROUP BY
          ds
      ) b
      ON a.metric_time = b.metric_time
    ) c
