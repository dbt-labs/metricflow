---
integration_test:
  name: simple_expr_metric
  description: Test for expr metric
  model: SIMPLE_MODEL
  metrics: ["booking_fees"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      SUM(booking_value) * 0.05 AS booking_fees
      , ds AS metric_time__day
    FROM {{ source_schema }}.fct_bookings
    GROUP BY ds;
---
integration_test:
  name: single_data_source_expr_metric
  description: Tests querying an expression metric sourced from multiple measures, but one semantic model
  model: SIMPLE_MODEL
  metrics: ["booking_fees_per_booker"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      SUM(booking_value) * 0.05 / COUNT(DISTINCT guest_id) AS booking_fees_per_booker
      , ds AS metric_time__day
    FROM {{ source_schema }}.fct_bookings
    GROUP BY ds;
---
integration_test:
  name: expr_metric
  description: Tests querying an expression metric sourced from multiple measures, but one semantic model
  model: SIMPLE_MODEL
  metrics: ["views_times_booking_value"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      booking_value * views AS views_times_booking_value
      , COALESCE(b.ds, v.ds) AS metric_time__day
    FROM (
      SELECT
        SUM(booking_value) AS booking_value
        , ds
      FROM {{source_schema}}.fct_bookings
      GROUP BY ds
    ) b
    FULL OUTER JOIN (
      SELECT
        SUM(1) AS views
        , ds
      FROM {{ source_schema }}.fct_views
      GROUP BY ds
    ) v
    ON b.ds = v.ds
---
integration_test:
  name: constrained_metric
  description: Test a metric with a constraint
  model: SIMPLE_MODEL
  metrics: ["instant_booking_value"]
  group_bys: ["metric_time"]
  where_filter: "{{ render_dimension_template('booking__is_instant') }}"
  check_query: |
    SELECT
      SUM(booking_value) AS instant_booking_value
      , ds AS metric_time__day
    FROM {{ source_schema }}.fct_bookings
    WHERE is_instant
    GROUP BY ds
---
integration_test:
  name: constrained_metric_with_non_constrained_metric_same_source
  description: Testing querying a constrained metric and a non-constrained metric, but sharing a common measure.
  model: SIMPLE_MODEL
  metrics: ["booking_value", "instant_booking_value"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      booking_value
      , instant_booking_value
      , a.ds AS metric_time__day
    FROM (
      SELECT
        SUM(booking_value) AS booking_value
        , ds
      FROM {{ source_schema }}.fct_bookings
      GROUP BY ds
    ) a
    FULL OUTER JOIN (
      SELECT
        SUM(booking_value) AS instant_booking_value
        , ds
      FROM {{ source_schema }}.fct_bookings
      WHERE is_instant
      GROUP BY ds
    ) b
    ON a.ds = b.ds
---
integration_test:
  name: constrained_metric_with_non_constrained_metric_diff_source
  description: Query both a constrained and non-constrained metric.
  model: SIMPLE_MODEL
  metrics: ["instant_booking_value", "views"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT instant_booking_value, views, COALESCE(a.ds, b.ds) AS metric_time__day
    FROM (
      SELECT
        SUM(booking_value) AS instant_booking_value
      , ds
      FROM {{ source_schema }}.fct_bookings
      WHERE is_instant
      GROUP BY ds
    ) a
    FULL OUTER JOIN (
      SELECT
        SUM(1) AS views
        , ds
      FROM {{ source_schema }}.fct_views
      GROUP BY ds
    ) b
    ON a.ds = b.ds
---
integration_test:
  name: identifier_constrained_metric
  description: Query a metric with a an identifier constraint.
  model: SIMPLE_MODEL
  metrics: ["booking_value_for_non_null_listing_id"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      SUM(booking_value) AS booking_value_for_non_null_listing_id
      , ds AS metric_time__day
    FROM {{ source_schema }}.fct_bookings
    WHERE listing_id IS NOT NULL
    GROUP BY ds
---
integration_test:
  name: dundered_dimension_thats_local
  description: Test metric with local dimensions
  model: SIMPLE_MODEL
  metrics: ["lux_listings"]
  group_bys: ["listing__country_latest"]
  where_filter: "{{ render_dimension_template('listing__country_latest') }} = 'us'"
  check_query: |
    SELECT
      SUM(1) AS lux_listings
      , country as listing__country_latest
    FROM {{ source_schema }}.dim_listings_latest
    WHERE
      country='us'
      AND is_lux
    GROUP BY country
---
integration_test:
  name: constrained_metric_with_user_input_constraint
  description: Test metric constrained by metrics definition and a user input
  model: SIMPLE_MODEL
  metrics: ["instant_booking_value"]
  group_bys: ["metric_time"]
  where_filter: "{{ render_dimension_template('listing__is_lux_latest') }}"
  check_query: |
    SELECT
      SUM(b.booking_value) AS instant_booking_value
      , b.ds AS metric_time__day
    FROM {{ source_schema }}.fct_bookings b
    LEFT OUTER JOIN {{ source_schema }}.dim_listings_latest l
      ON l.listing_id = b.listing_id
    WHERE
      b.is_instant
      AND l.is_lux
    GROUP BY b.ds
---
integration_test:
  name: same_measure_constrained_metric
  description: |
    Query metrics based on the same measure, but where one is constrained. Uses a FULL OUTER JOIN in the check query to
    produce NULL values correctly.
  model: SIMPLE_MODEL
  metrics: ["booking_value", "instant_booking_value"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      a.booking_value
      , b.instant_booking_value
      , COALESCE(a.ds, b.ds) AS metric_time__day
    FROM (
      SELECT
        SUM(booking_value) AS booking_value
        , ds
      FROM {{ source_schema }}.fct_bookings
      GROUP BY ds
    ) a
    FULL OUTER JOIN (
      SELECT
        SUM(booking_value) AS instant_booking_value
        , ds
      FROM {{ source_schema }}.fct_bookings
      WHERE is_instant
      GROUP BY ds
    ) b
    ON a.ds = b.ds
---
integration_test:
  name: min_SIMPLE
  description: Test SIMPLE metric with a min.
  model: SIMPLE_MODEL
  metrics: ["min_booking_value"]
  group_bys: []
  check_query: |
    SELECT
      min(booking_value) AS min_booking_value
    FROM {{ source_schema }}.fct_bookings
---
integration_test:
  name: max_SIMPLE
  description: Test SIMPLE metric with a max.
  model: SIMPLE_MODEL
  metrics: ["max_booking_value"]
  group_bys: []
  check_query: |
    SELECT
      max(booking_value) AS max_booking_value
    FROM {{ source_schema }}.fct_bookings
---
integration_test:
  name: count_distinct
  description: Test count_distinct metric.
  model: SIMPLE_MODEL
  metrics: ["bookers"]
  group_bys: ["metric_time", "booking__is_instant"]
  check_query: |
    SELECT
      COUNT(DISTINCT guest_id) AS bookers
      , is_instant AS booking__is_instant
      , ds AS metric_time__day
    FROM {{ source_schema }}.fct_bookings
    GROUP BY
      is_instant
      , ds
---
integration_test:
  name: count_distinct_with_constraint
  description: Test count_distinct metric with a constraint.
  model: SIMPLE_MODEL
  metrics: ["bookers"]
  group_bys: ["metric_time"]
  where_filter: "{{ render_dimension_template('booking__is_instant') }}"
  check_query: |
    SELECT
      COUNT(DISTINCT guest_id) AS bookers
      , ds AS metric_time__day
    FROM {{ source_schema }}.fct_bookings
    where is_instant
    GROUP BY
      ds
---
integration_test:
  name: ratio_single_data_source
  description: Test ratio metric from a single semantic model.
  model: SIMPLE_MODEL
  metrics: ["bookings_per_booker"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      CAST(SUM(1) AS {{ double_data_type_name }}) / COUNT(DISTINCT guest_id) AS bookings_per_booker
      , ds AS metric_time__day
    FROM {{ source_schema }}.fct_bookings
    GROUP BY ds
---
integration_test:
  name: ratio
  description: Test ratio metric from multiple semantic model.
  model: SIMPLE_MODEL
  metrics: ["bookings_per_view"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      CAST(bookings AS {{ double_data_type_name }}) / NULLIF(views, 0) AS bookings_per_view
      , COALESCE(groupby_8cbdaa28.ds, groupby_68058b0b.ds) AS metric_time__day
    FROM (
      SELECT
        COUNT(*) AS bookings
        , ds
      FROM {{ source_schema }}.fct_bookings
      GROUP BY
        ds
    ) groupby_8cbdaa28
    FULL OUTER JOIN (
      SELECT
        SUM(1) AS views
        , ds
      FROM {{ source_schema }}.fct_views
      GROUP BY
        ds
    ) groupby_68058b0b
    ON
    groupby_8cbdaa28.ds = groupby_68058b0b.ds
---
integration_test:
  name: ratio_sort
  description: Test ratio metric with a sort.
  model: SIMPLE_MODEL
  metrics: ["bookings_per_booker"]
  group_bys: ["metric_time"]
  order_bys: ["metric_time"]
  check_query: |
    SELECT
      CAST(SUM(1) AS {{ double_data_type_name }}) / COUNT(DISTINCT guest_id) AS bookings_per_booker
      , ds AS metric_time__day
    FROM {{ source_schema }}.fct_bookings
    GROUP BY ds
    ORDER BY ds
---
integration_test:
  name: ratio_with_zero_denominator
  description: Test ratio metric with a zero in the denominator.
  model: SIMPLE_MODEL
  metrics: ["bookings_per_dollar"]
  group_bys: ["metric_time"]
  time_constraint: ["2020-01-03", "2020-01-03"]
  check_query: |
    SELECT
      CAST(bookings AS {{ double_data_type_name }}) / NULLIF(booking_value, 0) AS bookings_per_dollar
      , bookings_source.ds AS metric_time__day
    FROM (
      SELECT
        SUM(1) AS bookings
        , SUM(booking_value) AS booking_value
        , ds
      FROM {{ source_schema }}.fct_bookings
      GROUP BY
        ds
    ) bookings_source
    WHERE {{ render_time_constraint("ds", "2020-01-03", "2020-01-03") }}
---
integration_test:
  name: ratio_primary_ident
  description: Test ratio metric joined on primary identifier.
  model: SIMPLE_MODEL
  metrics: ["bookings_per_listing"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      CAST(bookings AS {{ double_data_type_name }}) / NULLIF(listings, 0) AS bookings_per_listing
      , groupby_8cbdaa28.ds AS metric_time__day
    FROM (
      SELECT
        COUNT(*) AS bookings
        , ds
      FROM {{ source_schema }}.fct_bookings
      GROUP BY
        ds
    ) groupby_8cbdaa28
    FULL OUTER JOIN (
      SELECT
        SUM(1) AS listings
        , created_at AS ds
      FROM {{ source_schema }}.dim_listings_latest
      GROUP BY
        created_at
    ) groupby_68058b0b
    ON
    groupby_8cbdaa28.ds = groupby_68058b0b.ds
---
integration_test:
  name: metrics_with_different_dimension_values
  description: Test querying two metrics with a different primary date dimension.
  model: SIMPLE_MODEL
  metrics: ["bookings", "views"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      views
      , bookings
      , COALESCE(a.ds, b.ds) AS metric_time__day
    FROM (
        SELECT
          SUM(1) AS views
          , ds
        FROM {{ source_schema }}.fct_views
        GROUP BY ds

    ) a
    FULL OUTER JOIN (
        SELECT
          SUM(1) AS bookings
          , ds
        FROM {{ source_schema }}.fct_bookings
        GROUP BY ds
    ) b
    ON a.ds = b.ds
---
integration_test:
  name: ratio_with_non_ratio
  description: Test ratio metric with a non ratio metric with the same measure.
  model: SIMPLE_MODEL
  metrics: ["bookings", "bookings_per_view"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      bookings,
      CAST(bookings AS {{ double_data_type_name }}) / NULLIF(views, 0) AS bookings_per_view
      , COALESCE(a.ds, b.ds) AS metric_time__day
    FROM (
      SELECT
        COUNT(*) AS bookings
        , ds
      FROM {{ source_schema }}.fct_bookings
      GROUP BY
        ds
    ) a
    FULL OUTER JOIN (
      SELECT
        SUM(1) AS views
        , ds
      FROM {{ source_schema }}.fct_views
      GROUP BY
        ds
    ) b
    ON
    a.ds = b.ds
---
integration_test:
  name: query_with_3_metrics
  description: |
    Tests query with 3 metrics, and also checks an optimizing issue when there is a expression metric that is joined.
  model: SIMPLE_MODEL
  metrics: ["bookings", "bookings_per_booker", "booking_value"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      SUM(1) AS bookings
      , CAST(SUM(1) AS {{ double_data_type_name }}) / COUNT(DISTINCT guest_id) AS bookings_per_booker
      , SUM(booking_value) AS booking_value
      , ds AS metric_time__day
    FROM {{ source_schema }}.fct_bookings
    GROUP BY
      ds
---
integration_test:
  name: metric_with_aggregation_time_dimension_specified.
  description: |
    Tests a query for a metric based on a measure that has the aggregation time dimension specified.
  model: SIMPLE_MODEL
  metrics: ["booking_payments"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      SUM(booking_value) AS booking_payments
      , paid_at AS metric_time__day
    FROM {{ source_schema }}.fct_bookings
    GROUP BY
      paid_at
---
integration_test:
  name: metrics_with_different_aggregation_time_dimensions
  description: |
    Tests querying multiple metrics based on different aggregation time dimensions
  model: SIMPLE_MODEL
  metrics: ["booking_value", "booking_payments"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      booking_value
      , booking_payments
      , COALESCE(a.metric_time__day, b.metric_time__day) AS metric_time__day
    FROM (
      SELECT
        SUM(booking_value) AS booking_value
        , ds AS metric_time__day
      FROM {{ source_schema }}.fct_bookings
      GROUP BY
        ds
    ) a
    FULL OUTER JOIN (
      SELECT
        SUM(booking_value) AS booking_payments
        , paid_at AS metric_time__day
      FROM {{ source_schema }}.fct_bookings
      GROUP BY
        paid_at
    ) b
    ON a.metric_time__day = b.metric_time__day
---
integration_test:
  name: derived_metric
  description: Tests a derived metric query
  model: SIMPLE_MODEL
  metrics: ["non_referred_bookings_pct"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      (bookings - ref_bookings) * 1.0 / bookings AS non_referred_bookings_pct
      , metric_time__day
    FROM (
      SELECT
        SUM(CASE WHEN referrer_id IS NOT NULL THEN 1 ELSE 0 END) AS ref_bookings
        , SUM(1) AS bookings
        , ds AS metric_time__day
      FROM {{ source_schema }}.fct_bookings
      GROUP BY
        ds
    ) a
---
integration_test:
  name: derived_metric_ratio
  description: Tests a ratio metric defined as a derived metric
  model: SIMPLE_MODEL
  metrics: ["bookings_per_lux_listing_derived"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      bookings / CAST(NULLIF(lux_listings, 0) AS {{ double_data_type_name }}) AS bookings_per_lux_listing_derived
      , a.metric_time__day
    FROM (
      SELECT
        SUM(1) AS bookings
        , ds AS metric_time__day
      FROM {{ source_schema }}.fct_bookings
      GROUP BY
        ds
    ) a
    FULL OUTER JOIN (
      SELECT
        SUM(1) AS lux_listings
        , created_at AS metric_time__day
      FROM {{ source_schema }}.dim_listings_latest
      WHERE is_lux
      GROUP BY
        created_at
    ) b
    ON a.metric_time__day = b.metric_time__day
---
integration_test:
  name: nested_derived_metric
  description: Tests a nested derived metric
  model: SIMPLE_MODEL
  metrics: ["instant_plus_non_referred_bookings_pct"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      (instant_bookings * 1.0 / bookings) + ((bookings - ref_bookings) * 1.0 / bookings) AS instant_plus_non_referred_bookings_pct
      , metric_time__day
    FROM (
      SELECT
        SUM(CASE WHEN referrer_id IS NOT NULL THEN 1 ELSE 0 END) AS ref_bookings
        , SUM(CASE WHEN is_instant THEN 1 ELSE 0 END) AS instant_bookings
        , SUM(1) AS bookings
        , ds AS metric_time__day
      FROM {{ source_schema }}.fct_bookings
      GROUP BY
        ds
    ) a
---
integration_test:
  name: two_metrics_with_null_dimension_values
  description: Tests querying two metrics with a dimension having a NULL values
  model: SIMPLE_MODEL
  metrics: ["bookings", "views"]
  group_bys:
    ["metric_time", "listing__is_lux_latest", "listing__country_latest"]
  check_query: |
    SELECT
      MAX(bk.bookings) AS bookings
      ,MAX(vw.views) AS views
      ,COALESCE(bk.metric_time__day, vw.metric_time__day) AS metric_time__day
      ,COALESCE(bk.is_lux, vw.is_lux) AS listing__is_lux_latest
      ,COALESCE(bk.country, vw.country) AS listing__country_latest
    FROM (
      SELECT
        a.ds AS metric_time__day
        ,b.is_lux
        ,b.country
        ,SUM(1) AS bookings
      FROM {{ source_schema }}.fct_bookings a
      LEFT OUTER JOIN {{ source_schema }}.dim_listings_latest b
      ON a.listing_id = b.listing_id
      GROUP BY 1,2,3
    ) bk
    FULL OUTER JOIN (
      SELECT
        c.ds AS metric_time__day
        ,d.is_lux
        ,d.country
        ,SUM(1) AS views
        FROM {{ source_schema }}.fct_views c
        LEFT OUTER JOIN {{ source_schema }}.dim_listings_latest d
        ON c.listing_id = d.listing_id
        GROUP BY 1,2,3
    ) vw
    ON bk.metric_time__day = vw.metric_time__day AND bk.is_lux = vw.is_lux AND bk.country = vw.country
    GROUP BY 3,4,5
---
integration_test:
  name: three_metrics_with_null_dimension_values
  description: Tests querying three metrics with a dimension having NULL values and the on clause COALESCE behavior
  model: SIMPLE_MODEL
  metrics: ["bookings", "views", "listings"]
  group_bys: ["listing__is_lux_latest", "listing__country_latest"]
  check_query: |
    SELECT
      MAX(bk.bookings) AS bookings
      ,MAX(vw.views) AS views
      ,MAX(li.listings) AS listings
      ,COALESCE(bk.is_lux, vw.is_lux, li.is_lux) AS listing__is_lux_latest
      ,COALESCE(bk.country, vw.country, li.country) AS listing__country_latest
    FROM (
      SELECT
        b.is_lux
        ,b.country
        ,SUM(1) AS bookings
      FROM {{ source_schema }}.fct_bookings a
      LEFT OUTER JOIN {{ source_schema }}.dim_listings_latest b
      ON a.listing_id = b.listing_id
      GROUP BY 1,2
    ) bk
    FULL OUTER JOIN (
      SELECT
        d.is_lux
        ,d.country
        ,SUM(1) AS views
        FROM {{ source_schema }}.fct_views c
        LEFT OUTER JOIN {{ source_schema }}.dim_listings_latest d
        ON c.listing_id = d.listing_id
        GROUP BY 1,2
    ) vw
    ON bk.is_lux = vw.is_lux AND bk.country = vw.country
    FULL OUTER JOIN (
      SELECT
        is_lux
        ,country
        ,SUM(1) AS listings
      FROM {{ source_schema }}.dim_listings_latest
      GROUP BY 1,2
    ) li
    ON COALESCE(bk.is_lux, vw.is_lux) = li.is_lux AND COALESCE(bk.country, vw.country) = li.country
    GROUP BY 4,5
---
integration_test:
  name: derived_metrics_with_null_dimension_values
  description: Tests querying a derived metric with multiple inputs that link to dimension(s) with null values
  model: SIMPLE_MODEL
  metrics: [booking_value_per_view]
  group_bys: [listing__is_lux_latest]
  check_query: |
    SELECT
      booking_value / NULLIF(views, 0) AS booking_value_per_view
      , listing__is_lux_latest
    FROM (
      SELECT
        MAX(bk.booking_value) AS booking_value
        , MAX(vw.views) AS views
        , COALESCE(bk.is_lux, vw.is_lux) AS listing__is_lux_latest
      FROM (
        SELECT
          SUM(a.booking_value) AS booking_value
          ,b.is_lux
        FROM {{ source_schema }}.fct_bookings a
        LEFT OUTER JOIN {{ source_schema }}.dim_listings_latest b
        ON a.listing_id = b.listing_id
        GROUP BY 2
      ) bk
      FULL OUTER JOIN (
        SELECT
          SUM(1) AS views
          ,d.is_lux
        FROM {{ source_schema }}.fct_views c
        LEFT OUTER JOIN {{ source_schema }}.dim_listings_latest d
        ON c.listing_id = d.listing_id
        GROUP BY 2
      ) vw
      ON bk.is_lux = vw.is_lux
      GROUP BY 3
    ) x
---
integration_test:
  name: derived_metric_with_offset_window
  description: Tests a derived metric query with an offset_window
  model: SIMPLE_MODEL
  metrics: ["bookings_growth_2_weeks"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      COALESCE(a.metric_time__day, b.metric_time__day) AS metric_time__day
      , bookings - bookings_2_weeks_ago AS bookings_growth_2_weeks
    FROM (
      SELECT
        ds AS metric_time__day
        , SUM(1) AS bookings
      FROM {{ source_schema }}.fct_bookings
      GROUP BY
        ds
    ) a
    FULL OUTER JOIN (
      SELECT
        c.ds AS metric_time__day
        , d.bookings_2_weeks_ago AS bookings_2_weeks_ago
      FROM {{ mf_time_spine_source }} c
      INNER JOIN (
        SELECT
          ds AS metric_time__day
          , SUM(1) AS bookings_2_weeks_ago
        FROM {{ source_schema }}.fct_bookings
        GROUP BY
          ds
      ) d
      ON {{ render_date_sub("C", "ds", 14, TimeGranularity.DAY) }} = d.metric_time__day
    ) b
    ON a.metric_time__day = b.metric_time__day
---
integration_test:
  name: derived_metric_with_offset_to_grain
  description: Tests a derived metric query with an offset_to_grain
  model: SIMPLE_MODEL
  metrics: ["bookings_growth_since_start_of_month"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      COALESCE(a.metric_time__day, b.metric_time__day) AS metric_time__day
      , bookings - bookings_at_start_of_month AS bookings_growth_since_start_of_month
    FROM (
      SELECT
        ds AS metric_time__day
        , SUM(1) AS bookings
      FROM {{ source_schema }}.fct_bookings
      GROUP BY
        ds
    ) a
    FULL OUTER JOIN (
      SELECT
        c.ds AS metric_time__day
        , d.bookings_at_start_of_month AS bookings_at_start_of_month
      FROM {{ mf_time_spine_source }} c
      INNER JOIN (
        SELECT
          ds AS metric_time__day
          , SUM(1) AS bookings_at_start_of_month
        FROM {{ source_schema }}.fct_bookings
        GROUP BY
          ds
      ) d
      ON {{ render_date_trunc("c.ds", TimeGranularity.MONTH) }} = d.metric_time__day
    ) b
    ON a.metric_time__day = b.metric_time__day
---
integration_test:
  name: derived_metric_with_offset_window_and_offset_to_grain
  description: Tests a derived metric query with 2 input metrics, one with an offset_window and one with an offset_to_grain
  model: SIMPLE_MODEL
  metrics: ["bookings_month_start_compared_to_1_month_prior"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      COALESCE(a.metric_time__day, b.metric_time__day) AS metric_time__day
      , month_start_bookings - bookings_1_month_ago AS bookings_month_start_compared_to_1_month_prior
    FROM (
      SELECT
        g.ds AS metric_time__day
        , f.bookings AS bookings_1_month_ago
      FROM {{ mf_time_spine_source }} g
      INNER JOIN (
        SELECT
          ds AS metric_time__day
          , SUM(1) AS bookings
        FROM {{ source_schema }}.fct_bookings
        GROUP BY
          ds
      ) f
      ON {{ render_date_sub("g", "ds", 1, TimeGranularity.MONTH) }} = f.metric_time__day
    ) a
    FULL OUTER JOIN (
      SELECT
        c.ds AS metric_time__day
        , d.bookings AS month_start_bookings
      FROM {{ mf_time_spine_source }} c
      INNER JOIN (
        SELECT
          ds AS metric_time__day
          , SUM(1) AS bookings
        FROM {{ source_schema }}.fct_bookings
        GROUP BY
          ds
      ) d
      ON {{ render_date_trunc("c.ds", TimeGranularity.MONTH) }} = d.metric_time__day
    ) b
    ON a.metric_time__day = b.metric_time__day
---
integration_test:
  name: derived_metric_offset_with_one_metric_input
  description: Tests a derived metric offset query with only one input metric
  model: SIMPLE_MODEL
  metrics: ["bookings_5_day_lag"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      a.ds AS metric_time__day
      , b.bookings_5_day_lag
    FROM {{ mf_time_spine_source }} a
    INNER JOIN (
      SELECT
        ds AS metric_time__day
        , SUM(1) AS bookings_5_day_lag
      FROM {{ source_schema }}.fct_bookings
      GROUP BY
        ds
    ) b
    ON {{ render_date_sub("a", "ds", 5, TimeGranularity.DAY) }} = b.metric_time__day
---
integration_test:
  name: derived_metric_with_input_metric_with_constraint
  description: |
    Tests a derived metric where the input metric has a metric constraint
  model: SIMPLE_MODEL
  metrics: ["booking_value_sub_instant"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      booking_value - instant_booking_value AS booking_value_sub_instant
      , COALESCE(a.metric_time__day, b.metric_time__day) AS metric_time__day
    FROM (
      SELECT
        SUM(booking_value) AS instant_booking_value
        , ds AS metric_time__day
      FROM {{ source_schema }}.fct_bookings
      WHERE is_instant
      GROUP BY
        ds
    ) a
    FULL OUTER JOIN (
      SELECT
        SUM(booking_value) AS booking_value
        , ds AS metric_time__day
      FROM {{ source_schema }}.fct_bookings
      GROUP BY
        ds
    ) b
    ON a.metric_time__day = b.metric_time__day
---
integration_test:
  name: nested_derived_metric_with_input_metric_with_constraint
  description: |
    Tests a nested derived metric where the input metric is a derived metric
    where the input_metric has a metric constraint
  model: SIMPLE_MODEL
  metrics: ["booking_value_sub_instant_add_10"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      c.booking_value_sub_instant + 10 AS booking_value_sub_instant_add_10
      , c.metric_time__day
    FROM (
      SELECT
        booking_value - instant_booking_value AS booking_value_sub_instant
        , COALESCE(a.metric_time__day, b.metric_time__day) AS metric_time__day
      FROM (
        SELECT
          SUM(booking_value) AS instant_booking_value
          , ds AS metric_time__day
        FROM {{ source_schema }}.fct_bookings
        WHERE is_instant
        GROUP BY
          ds
      ) a
      FULL OUTER JOIN (
        SELECT
          SUM(booking_value) AS booking_value
          , ds AS metric_time__day
        FROM {{ source_schema }}.fct_bookings
        GROUP BY
          ds
      ) b
      ON a.metric_time__day = b.metric_time__day
    ) c
---
integration_test:
  name: derived_metric_offset_window_and_granularity
  description: Tests a derived metric offset query with window and granularity
  model: SIMPLE_MODEL
  metrics: ["bookings_5_day_lag"]
  group_bys: ["metric_time__month"]
  check_query: |
    SELECT
      {{ render_date_trunc("a.ds", TimeGranularity.MONTH) }} AS metric_time__month
      , SUM(b.bookings_5_day_lag) AS bookings_5_day_lag
    FROM {{ mf_time_spine_source }} a
    INNER JOIN (
      SELECT
        ds AS metric_time__day
        , 1 AS bookings_5_day_lag
      FROM {{ source_schema }}.fct_bookings
    ) b
    ON {{ render_date_sub("a", "ds", 5, TimeGranularity.DAY) }} = b.metric_time__day
    GROUP BY {{ render_date_trunc("a.ds", TimeGranularity.MONTH) }}
---
integration_test:
  name: derived_metric_with_offset_to_grain_and_granularity
  description: Tests a derived metric query with an offset_to_grain and granularity
  model: SIMPLE_MODEL
  metrics: ["bookings_growth_since_start_of_month"]
  group_bys: ["metric_time__week"]
  check_query: |
    SELECT
      COALESCE(a.metric_time__week, b.metric_time__week)  AS metric_time__week
      , bookings - bookings_at_start_of_month AS bookings_growth_since_start_of_month
    FROM (
      SELECT
        {{ render_date_trunc("ds", TimeGranularity.WEEK) }} AS metric_time__week
        , SUM(1) AS bookings
      FROM {{ source_schema }}.fct_bookings
      GROUP BY {{ render_date_trunc("ds", TimeGranularity.WEEK) }}
    ) a
    FULL OUTER JOIN (
      SELECT
        {{ render_date_trunc("c.ds", TimeGranularity.WEEK) }} AS metric_time__week
        , SUM(d.bookings_at_start_of_month) AS bookings_at_start_of_month
      FROM {{ mf_time_spine_source }} c
      INNER JOIN (
        SELECT
          ds AS metric_time__day
          , 1 AS bookings_at_start_of_month
        FROM {{ source_schema }}.fct_bookings
      ) d
      ON {{ render_date_trunc("c.ds", TimeGranularity.MONTH) }} = d.metric_time__day
      WHERE {{ render_date_trunc("c.ds", TimeGranularity.WEEK) }} = c.ds
      GROUP BY {{ render_date_trunc("c.ds", TimeGranularity.WEEK) }}
    ) b
    ON a.metric_time__week = b.metric_time__week
---
integration_test:
  name: derived_metric_with_offset_window_and_offset_to_grain_and_granularity
  description: |
    Tests a derived metric query with 2 input metrics, one with an offset_window and
    one with an offset_to_grain, plus granularity
  model: SIMPLE_MODEL
  metrics: ["bookings_month_start_compared_to_1_month_prior"]
  group_bys: ["metric_time__year"]
  check_query: |
    SELECT
      COALESCE(a.metric_time__year, b.metric_time__year) AS metric_time__year
      , month_start_bookings - bookings_1_month_ago AS bookings_month_start_compared_to_1_month_prior
    FROM (
      SELECT
        {{ render_date_trunc("g.ds", TimeGranularity.YEAR) }} AS metric_time__year
        , SUM(f.bookings) AS bookings_1_month_ago
      FROM {{ mf_time_spine_source }} g
      INNER JOIN (
        SELECT
          ds AS metric_time__day
          , 1 AS bookings
        FROM {{ source_schema }}.fct_bookings
      ) f
      ON {{ render_date_sub("g", "ds", 1, TimeGranularity.MONTH) }} = f.metric_time__day
      GROUP BY {{ render_date_trunc("g.ds", TimeGranularity.YEAR) }}
    ) a
    FULL OUTER JOIN (
      SELECT
        {{ render_date_trunc("c.ds", TimeGranularity.YEAR) }} AS metric_time__year
        , SUM(d.bookings) AS month_start_bookings
      FROM {{ mf_time_spine_source }} c
      INNER JOIN (
        SELECT
          ds AS metric_time__day
          , 1 AS bookings
        FROM {{ source_schema }}.fct_bookings
      ) d
      ON {{ render_date_trunc("c.ds", TimeGranularity.MONTH) }} = d.metric_time__day
      WHERE {{ render_date_trunc("c.ds", TimeGranularity.YEAR) }} = c.ds
      GROUP BY {{ render_date_trunc("c.ds", TimeGranularity.YEAR) }}
    ) b
    ON a.metric_time__year = b.metric_time__year
---
integration_test:
  name: derived_metric_offset_with_cumulative_metric
  description: |
    Tests a derived metric offset query for a cumulative input metric
  model: SIMPLE_MODEL
  metrics: ["every_2_days_bookers_2_days_ago"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      d.ds AS metric_time__day
      , c.every_two_days_bookers AS every_2_days_bookers_2_days_ago
    FROM {{ mf_time_spine_source }} d
    INNER JOIN (
      SELECT
        a.ds AS metric_time__day
        , COUNT(DISTINCT b.guest_id) AS every_two_days_bookers
      FROM {{ mf_time_spine_source }} a
      INNER JOIN {{ source_schema }}.fct_bookings b
        ON (b.ds <= a.ds) AND (b.ds > {{ render_date_sub("a", "ds", 2, TimeGranularity.DAY) }})
      GROUP BY a.ds
    ) c
    ON {{ render_date_sub("d", "ds", 2, TimeGranularity.DAY) }} = c.metric_time__day
---
integration_test:
  name: derived_metric_with_window_and_multiple_granularities
  description: Tests a derived metric offset query with offset to grain and 2 metric_time granularities
  model: SIMPLE_MODEL
  metrics: ["bookings_5_day_lag"]
  group_bys: ["metric_time__month", "metric_time__week"]
  check_query: |
    SELECT
      {{ render_date_trunc("a.ds", TimeGranularity.MONTH) }} AS metric_time__month
      , {{ render_date_trunc("a.ds", TimeGranularity.WEEK) }} AS metric_time__week
      , SUM(b.bookings_5_day_lag) AS bookings_5_day_lag
    FROM {{ mf_time_spine_source }} a
    INNER JOIN (
      SELECT
        ds AS metric_time__day
        , 1 AS bookings_5_day_lag
      FROM {{ source_schema }}.fct_bookings
    ) b
    ON {{ render_date_sub("a", "ds", 5, TimeGranularity.DAY) }} = b.metric_time__day
    GROUP BY {{ render_date_trunc("a.ds", TimeGranularity.MONTH) }}, {{ render_date_trunc("a.ds", TimeGranularity.WEEK) }}
---
integration_test:
  name: derived_metric_with_offset_to_grain_and_multiple_granularities
  description: Tests a derived metric query with an offset_to_grain and granularity
  model: SIMPLE_MODEL
  metrics: ["bookings_growth_since_start_of_month"]
  group_bys: ["metric_time__month", "metric_time__week"]
  check_query: |
    SELECT
      COALESCE(a.metric_time__week, b.metric_time__week) AS metric_time__week
      , COALESCE(a.metric_time__month, b.metric_time__month) AS metric_time__month
      , bookings - bookings_at_start_of_month AS bookings_growth_since_start_of_month
    FROM (
      SELECT
        {{ render_date_trunc("ds", TimeGranularity.WEEK) }} AS metric_time__week
        , {{ render_date_trunc("ds", TimeGranularity.MONTH) }} AS metric_time__month
        , SUM(1) AS bookings
      FROM {{ source_schema }}.fct_bookings
      GROUP BY {{ render_date_trunc("ds", TimeGranularity.WEEK) }}, {{ render_date_trunc("ds", TimeGranularity.MONTH) }}
    ) a
    FULL OUTER JOIN (
      SELECT
        {{ render_date_trunc("c.ds", TimeGranularity.WEEK) }} AS metric_time__week
        , {{ render_date_trunc("c.ds", TimeGranularity.MONTH) }} AS metric_time__month
        , SUM(d.bookings_at_start_of_month) AS bookings_at_start_of_month
      FROM {{ mf_time_spine_source }} c
      INNER JOIN (
        SELECT
          ds AS metric_time__day
          , 1 AS bookings_at_start_of_month
        FROM {{ source_schema }}.fct_bookings
      ) d
      ON {{ render_date_trunc("c.ds", TimeGranularity.MONTH) }} = d.metric_time__day
      WHERE {{ render_date_trunc("c.ds", TimeGranularity.WEEK) }} = c.ds
        OR {{ render_date_trunc("c.ds", TimeGranularity.MONTH) }} = c.ds
      GROUP BY {{ render_date_trunc("c.ds", TimeGranularity.WEEK) }}, {{ render_date_trunc("c.ds", TimeGranularity.MONTH) }}
    ) b
    ON a.metric_time__week = b.metric_time__week
      AND a.metric_time__month = b.metric_time__month
---
integration_test:
  name: simple_query_with_date_part
  description: Test query using date_part
  model: SIMPLE_MODEL
  metrics: ["bookings"]
  group_by_objs: [{"name": "metric_time", "date_part": "year"}]
  check_query: |
    SELECT
      SUM(1) AS bookings
      , {{ render_extract("ds", DatePart.YEAR) }} AS metric_time__extract_year
    FROM {{ source_schema }}.fct_bookings
    GROUP BY {{ render_extract("ds", DatePart.YEAR) }};
---
integration_test:
  name: simple_query_with_date_part_not_metric_time
  description: Test query using date_part
  model: SIMPLE_MODEL
  metrics: ["bookings"]
  group_by_objs: [{"name": "booking__ds", "date_part": "year"}]
  check_query: |
    SELECT
      SUM(1) AS bookings
      , {{ render_extract("ds", DatePart.YEAR) }} AS booking__ds__extract_year
    FROM {{ source_schema }}.fct_bookings
    GROUP BY {{ render_extract("ds", DatePart.YEAR) }};
---
integration_test:
  name: simple_query_with_multiple_date_parts
  description: Test query using multiple date_parts
  model: SIMPLE_MODEL
  metrics: ["bookings"]
  group_by_objs: [
    {"name": "metric_time", "date_part": "quarter"},
    {"name": "metric_time", "date_part": "dow"},
    {"name": "metric_time", "date_part": "doy"},
    {"name": "metric_time", "date_part": "day"},
  ]
  check_query: |
    SELECT
      SUM(1) AS bookings
      , {{ render_extract("ds", DatePart.QUARTER) }} AS metric_time__extract_quarter
      , {{ render_extract("ds", DatePart.DOW) }} AS metric_time__extract_dow
      , {{ render_extract("ds", DatePart.DOY) }} AS metric_time__extract_doy
      , {{ render_extract("ds", DatePart.DAY) }} AS metric_time__extract_day
    FROM {{ source_schema }}.fct_bookings
    GROUP BY
      {{ render_extract("ds", DatePart.QUARTER) }}
      , {{ render_extract("ds", DatePart.DOW) }}
      , {{ render_extract("ds", DatePart.DOY) }}
      , {{ render_extract("ds", DatePart.DAY) }}
---
integration_test:
  name: derived_metric_offset_window_and_date_part
  description: Tests a derived metric offset query with window and date_part
  model: SIMPLE_MODEL
  metrics: ["bookings_5_day_lag"]
  group_by_objs: [{"name": "metric_time", "date_part": "month"}]
  check_query: |
    SELECT
      {{ render_extract("a.ds", DatePart.MONTH) }} AS metric_time__extract_month
      , SUM(b.bookings_5_day_lag) AS bookings_5_day_lag
    FROM {{ mf_time_spine_source }} a
    INNER JOIN (
      SELECT
        ds AS metric_time__day
        , 1 AS bookings_5_day_lag
      FROM {{ source_schema }}.fct_bookings
    ) b
    ON {{ render_date_sub("a", "ds", 5, TimeGranularity.DAY) }} = b.metric_time__day
    GROUP BY {{ render_extract("a.ds", DatePart.MONTH) }}
---
integration_test:
  name: simple_distinct_query_with_date_part
  description: Test count distinct query using date_part
  model: SIMPLE_MODEL
  metrics: ["bookers"]
  group_by_objs: [{"name": "metric_time", "date_part": "dow"}]
  check_query: |
    SELECT
      COUNT(DISTINCT guest_id) AS bookers
      , {{ render_extract("ds", DatePart.DOW) }} AS metric_time__extract_dow
    FROM {{ source_schema }}.fct_bookings
    GROUP BY {{ render_extract("ds", DatePart.DOW) }};
---
integration_test:
  name: simple_fill_nulls_with_0_metric_time
  description: Test a simple query that joins to time spine and fills nulls
  model: SIMPLE_MODEL
  metrics: ["bookings_fill_nulls_with_0"]
  group_by_objs: [{"name": "metric_time"}]
  check_query: |
    SELECT
      subq_5.ds AS metric_time__day
      , COALESCE(subq_3.bookings, 0) AS bookings_fill_nulls_with_0
    FROM {{ source_schema }}.mf_time_spine subq_5
    LEFT OUTER JOIN (
      SELECT
        {{ render_date_trunc("ds", TimeGranularity.DAY) }} AS metric_time__day
        , SUM(1) AS bookings
      FROM {{ source_schema }}.fct_bookings bookings_source_src_1
      GROUP BY 1
    ) subq_3
    ON subq_5.ds = subq_3.metric_time__day
---
integration_test:
  name: simple_fill_nulls_with_0_month
  description: Test a simple query that joins to time spine and fills nulls, with non-default granularity
  model: SIMPLE_MODEL
  metrics: ["bookings_fill_nulls_with_0"]
  group_by_objs: [{"name": "metric_time", "grain": "month"}]
  check_query: |
    SELECT
      subq_4.metric_time__month AS metric_time__month
      , COALESCE(subq_3.bookings, 0) AS bookings_fill_nulls_with_0
    FROM (
      SELECT
        {{ render_date_trunc("ds", TimeGranularity.MONTH) }} AS metric_time__month
      FROM {{ source_schema }}.mf_time_spine subq_5
      GROUP BY 1
    ) subq_4
    LEFT OUTER JOIN (
      SELECT
        {{ render_date_trunc("ds", TimeGranularity.MONTH) }} AS metric_time__month
        , SUM(1) AS bookings
      FROM {{ source_schema }}.fct_bookings bookings_source_src_1
      GROUP BY 1
    ) subq_3
    ON subq_4.metric_time__month = subq_3.metric_time__month
---
integration_test:
  name: simple_fill_nulls_with_0_with_non_metric_time
  description: Test simple query that fills nulls but doesn't join to time spine (non-metric time dimension)
  model: SIMPLE_MODEL
  metrics: ["bookings_fill_nulls_with_0"]
  group_by_objs: [{"name": "booking__paid_at"}]
  check_query: |
    SELECT
      {{ render_date_trunc("paid_at", TimeGranularity.DAY) }} AS booking__paid_at__day
      , COALESCE(SUM(1), 0) AS bookings_fill_nulls_with_0
    FROM {{ source_schema }}.fct_bookings bookings_source_src_1
    GROUP BY
      1
---
integration_test:
  name: simple_fill_nulls_with_0_with_categorical_dimension
  description: Test simple query that fills nulls but doesn't join to time spine (categorical dimension)
  model: SIMPLE_MODEL
  metrics: ["bookings_fill_nulls_with_0"]
  group_by_objs: [{"name": "booking__is_instant"}]
  check_query: |
    SELECT
      is_instant AS booking__is_instant
      , COALESCE(SUM(1), 0) AS bookings_fill_nulls_with_0
    FROM {{ source_schema }}.fct_bookings bookings_source_src_1
    GROUP BY 1
---
integration_test:
  name: simple_join_to_time_spine
  description: Test a simple metric that joins to time spine, but doesn't fill nulls
  model: SIMPLE_MODEL
  metrics: ["bookings_join_to_time_spine"]
  group_by_objs: [{"name": "metric_time"}]
  check_query: |
    SELECT
      subq_5.ds AS metric_time__day
      , subq_3.bookings AS bookings_join_to_time_spine
    FROM {{ source_schema }}.mf_time_spine subq_5
    LEFT JOIN (
      SELECT
        {{ render_date_trunc("ds", TimeGranularity.DAY) }} AS metric_time__day
        , SUM(1) AS bookings
      FROM {{ source_schema }}.fct_bookings bookings_source_src_1
      GROUP BY
        1
    ) subq_3
    ON
      subq_5.ds = subq_3.metric_time__day
---
integration_test:
  name: simple_fill_nulls_without_time_spine
  description: Test a simple query that fills nulls, but doesn't join to time spine (even for metric time)
  model: SIMPLE_MODEL
  metrics: ["bookings_fill_nulls_with_0_without_time_spine"]
  group_by_objs: [{"name": "metric_time"}]
  check_query: |
    SELECT
      {{ render_date_trunc("ds", TimeGranularity.DAY) }} AS metric_time__day
      , COALESCE(SUM(1), 0) AS bookings_fill_nulls_with_0_without_time_spine
    FROM {{ source_schema }}.fct_bookings bookings_source_src_1
    GROUP BY 1
---
integration_test:
  name: cumulative_fill_nulls
  description: Test a cumulative metric that fills nulls
  model: SIMPLE_MODEL
  metrics: ["every_two_days_bookers_fill_nulls_with_0"]
  group_by_objs: [{"name": "metric_time"}]
  check_query: |
    SELECT
      subq_8.ds AS metric_time__day
      , COALESCE(subq_6.bookers, 0) AS every_two_days_bookers_fill_nulls_with_0
    FROM {{ source_schema }}.mf_time_spine subq_8
    LEFT JOIN (
      SELECT
        subq_3.ds AS metric_time__day
        , COUNT(DISTINCT bookings_source_src_1.guest_id) AS bookers
      FROM {{ source_schema }}.mf_time_spine subq_3
      INNER JOIN
        {{ source_schema }}.fct_bookings bookings_source_src_1
      ON ({{ render_date_trunc("bookings_source_src_1.ds", TimeGranularity.DAY) }} <= subq_3.ds)
        AND ({{ render_date_trunc("bookings_source_src_1.ds", TimeGranularity.DAY) }} > {{ render_date_sub("subq_3", "ds", 2, TimeGranularity.DAY) }})
      GROUP BY
        subq_3.ds
    ) subq_6
    ON subq_8.ds = subq_6.metric_time__day
---
integration_test:
  name: derived_fill_nulls_for_one_input_metric
  description: Test a derived metric that fills nulls on one input metric but not the other
  model: SIMPLE_MODEL
  metrics: ["bookings_growth_2_weeks_fill_nulls_with_0_for_non_offset"]
  group_by_objs: [{"name": "metric_time"}]
  check_query: |
    SELECT
      metric_time__day
      , bookings_fill_nulls_with_0 - bookings_2_weeks_ago AS bookings_growth_2_weeks_fill_nulls_with_0_for_non_offset
    FROM (
      SELECT
        subq_7.metric_time__day
        , COALESCE(MAX(subq_7.bookings_fill_nulls_with_0), 0) AS bookings_fill_nulls_with_0
        , subq_15.bookings_2_weeks_ago AS bookings_2_weeks_ago
      FROM (
        SELECT
          subq_5.ds AS metric_time__day
          , COALESCE(subq_3.bookings, 0) AS bookings_fill_nulls_with_0
        FROM {{ source_schema }}.mf_time_spine subq_5
        LEFT JOIN (
          SELECT
            {{ render_date_trunc("ds", TimeGranularity.DAY) }} AS metric_time__day
            , SUM(1) AS bookings
          FROM {{ source_schema }}.fct_bookings bookings_source_src_1
          GROUP BY
            1
        ) subq_3
        ON subq_5.ds = subq_3.metric_time__day
      ) subq_7
      FULL OUTER JOIN (
        SELECT
          subq_11.ds AS metric_time__day
          , SUM(subq_9.bookings) AS bookings_2_weeks_ago
        FROM {{ source_schema }}.mf_time_spine subq_11
        INNER JOIN (
          SELECT
            {{ render_date_trunc("ds", TimeGranularity.DAY) }} AS metric_time__day
            , 1 AS bookings
          FROM {{ source_schema }}.fct_bookings bookings_source_src_1
        ) subq_9
        ON {{ render_date_sub("subq_11", "ds", 14, TimeGranularity.DAY) }} = subq_9.metric_time__day
        GROUP BY subq_11.ds
      ) subq_15
      ON subq_7.metric_time__day = subq_15.metric_time__day
      GROUP BY 1, 3
    ) subq_16
---
integration_test:
  name: fill_nulls_with_0_multi_metric_query
  description: Test a multi-metric query that fills nulls
  model: SIMPLE_MODEL
  metrics: ["bookings_fill_nulls_with_0", "views"]
  group_by_objs: [{"name": "metric_time"}]
  check_query: |
    SELECT
      COALESCE(subq_7.metric_time__day, subq_12.metric_time__day) AS metric_time__day
      , COALESCE(MAX(subq_7.bookings_fill_nulls_with_0), 0) AS bookings_fill_nulls_with_0
      , MAX(subq_12.views) AS views
    FROM (
      SELECT
        subq_5.ds AS metric_time__day
        , COALESCE(subq_3.bookings, 0) AS bookings_fill_nulls_with_0
      FROM {{ source_schema }}.mf_time_spine subq_5
      LEFT OUTER JOIN (
        SELECT
          {{ render_date_trunc("ds", TimeGranularity.DAY) }} AS metric_time__day
          , SUM(1) AS bookings
        FROM {{ source_schema }}.fct_bookings bookings_source_src_1
        GROUP BY 1
      ) subq_3
      ON subq_5.ds = subq_3.metric_time__day
    ) subq_7
    FULL OUTER JOIN (
      SELECT
        {{ render_date_trunc("ds", TimeGranularity.DAY) }} AS metric_time__day
        , SUM(1) AS views
      FROM {{ source_schema }}.fct_views views_source_src_9
      GROUP BY 1
    ) subq_12
    ON subq_7.metric_time__day = subq_12.metric_time__day
    GROUP BY COALESCE(subq_7.metric_time__day, subq_12.metric_time__day)
---
integration_test:
  name: fill_nulls_with_0_multi_metric_query_with_nesting
  description: Test a multi-metric query with a nested join that fills nulls
  model: SIMPLE_MODEL
  metrics: ["bookings_growth_2_weeks_fill_nulls_with_0_for_non_offset", "booking_value"]
  group_by_objs: [{"name": "metric_time"}]
  check_query: |
    SELECT
      COALESCE(subq_17.metric_time__day, subq_22.metric_time__day) AS metric_time__day
      , MAX(subq_17.bookings_growth_2_weeks_fill_nulls_with_0_for_non_offset) AS bookings_growth_2_weeks_fill_nulls_with_0_for_non_offset
      , MAX(subq_22.booking_value) AS booking_value
    FROM (
      SELECT
        metric_time__day
        , bookings_fill_nulls_with_0 - bookings_2_weeks_ago AS bookings_growth_2_weeks_fill_nulls_with_0_for_non_offset
      FROM (
        SELECT
          COALESCE(subq_7.metric_time__day, subq_15.metric_time__day) AS metric_time__day
          , COALESCE(MAX(subq_7.bookings_fill_nulls_with_0), 0) AS bookings_fill_nulls_with_0
          , MAX(subq_15.bookings_2_weeks_ago) AS bookings_2_weeks_ago
        FROM (
          SELECT
            metric_time__day
            , COALESCE(bookings, 0) AS bookings_fill_nulls_with_0
          FROM (
            SELECT
              subq_5.ds AS metric_time__day
              , subq_3.bookings AS bookings
            FROM {{ source_schema }}.mf_time_spine subq_5
            LEFT OUTER JOIN (
              SELECT
                {{ render_date_trunc("ds", TimeGranularity.DAY) }} AS metric_time__day
                , SUM(1) AS bookings
              FROM {{ source_schema }}.fct_bookings bookings_source_src_1
              GROUP BY 1
            ) subq_3
            ON subq_5.ds = subq_3.metric_time__day
          ) subq_6
        ) subq_7
        FULL OUTER JOIN (
          SELECT
            subq_11.ds AS metric_time__day
            , SUM(subq_9.bookings) AS bookings_2_weeks_ago
          FROM {{ source_schema }}.mf_time_spine subq_11
          INNER JOIN (
            SELECT
              {{ render_date_trunc("ds", TimeGranularity.DAY) }} AS metric_time__day
              , 1 AS bookings
            FROM {{ source_schema }}.fct_bookings bookings_source_src_1
          ) subq_9
          ON {{ render_date_sub("subq_11", "ds", 14, TimeGranularity.DAY) }} = subq_9.metric_time__day
          GROUP BY subq_11.ds
        ) subq_15
        ON subq_7.metric_time__day = subq_15.metric_time__day
        GROUP BY COALESCE(subq_7.metric_time__day, subq_15.metric_time__day)
      ) subq_16
    ) subq_17
    FULL OUTER JOIN (
      SELECT
        {{ render_date_trunc("ds", TimeGranularity.DAY) }} AS metric_time__day
        , SUM(booking_value) AS booking_value
      FROM {{ source_schema }}.fct_bookings bookings_source_src_1
      GROUP BY {{ render_date_trunc("ds", TimeGranularity.DAY) }}
    ) subq_22
    ON subq_17.metric_time__day = subq_22.metric_time__day
    GROUP BY COALESCE(subq_17.metric_time__day, subq_22.metric_time__day)
---
integration_test:
  name: fill_nulls_with_0_multi_metric_query_with_categorical_dimension
  description: Test a multi-metric query that fills nulls
  model: SIMPLE_MODEL
  metrics: ["bookings_fill_nulls_with_0_without_time_spine", "views"]
  group_by_objs: [{"name": "metric_time"}, {"name": "listing__is_lux_latest"}]
  check_query: |
    SELECT
      COALESCE(subq_9.metric_time__day, subq_19.metric_time__day) AS metric_time__day
      , COALESCE(subq_9.listing__is_lux_latest, subq_19.listing__is_lux_latest) AS listing__is_lux_latest
      , COALESCE(MAX(subq_9.bookings_fill_nulls_with_0_without_time_spine), 0) AS bookings_fill_nulls_with_0_without_time_spine
      , MAX(subq_19.views) AS views
    FROM (
      SELECT
        subq_2.metric_time__day AS metric_time__day
        , listings_latest_src_4.is_lux AS listing__is_lux_latest
        , COALESCE(SUM(subq_2.bookings), 0) AS bookings_fill_nulls_with_0_without_time_spine
      FROM (
        SELECT
          {{ render_date_trunc("ds", TimeGranularity.DAY) }} AS metric_time__day
          , listing_id AS listing
          , 1 AS bookings
        FROM {{ source_schema }}.fct_bookings bookings_source_src_1
      ) subq_2
      LEFT OUTER JOIN
        {{ source_schema }}.dim_listings_latest listings_latest_src_4
      ON subq_2.listing = listings_latest_src_4.listing_id
      GROUP BY subq_2.metric_time__day, listings_latest_src_4.is_lux
    ) subq_9
    FULL OUTER JOIN (
      SELECT
        subq_12.metric_time__day AS metric_time__day
        , listings_latest_src_4.is_lux AS listing__is_lux_latest
        , SUM(subq_12.views) AS views
      FROM (
        SELECT
          {{ render_date_trunc("ds", TimeGranularity.DAY) }} AS metric_time__day
          , listing_id AS listing
          , 1 AS views
        FROM {{ source_schema }}.fct_views views_source_src_9
      ) subq_12
      LEFT OUTER JOIN
        {{ source_schema }}.dim_listings_latest listings_latest_src_4
      ON subq_12.listing = listings_latest_src_4.listing_id
      GROUP BY subq_12.metric_time__day, listings_latest_src_4.is_lux
    ) subq_19
    ON (subq_9.listing__is_lux_latest = subq_19.listing__is_lux_latest)
      AND (subq_9.metric_time__day = subq_19.metric_time__day)
    GROUP BY
      COALESCE(subq_9.metric_time__day, subq_19.metric_time__day)
      , COALESCE(subq_9.listing__is_lux_latest, subq_19.listing__is_lux_latest)
---
integration_test:
  name: nested_derived_metric_outer_offset
  description: Tests a nested derived metric where the outer metric has an input metric with offset_window.
  model: SIMPLE_MODEL
  metrics: ["bookings_offset_twice"]
  group_by_objs: [{"name": "metric_time"}]
  check_query: |
    SELECT
      subq_9.ds AS metric_time__day
      , 2 * bookings_offset_once AS bookings_offset_twice
    FROM {{ source_schema }}.mf_time_spine subq_9
    INNER JOIN (
      SELECT
        metric_time__day
        , 2 * bookings AS bookings_offset_once
      FROM (
        SELECT
          subq_3.ds AS metric_time__day
          , SUM(subq_1.bookings) AS bookings
        FROM {{ source_schema }}.mf_time_spine subq_3
        INNER JOIN (
          SELECT
            {{ render_date_trunc("ds", TimeGranularity.DAY) }} AS metric_time__day
            , 1 AS bookings
          FROM {{ source_schema }}.fct_bookings bookings_source_src_1
        ) subq_1
        ON
          {{ render_date_sub("subq_3", "ds", 5, TimeGranularity.DAY) }} = subq_1.metric_time__day
        GROUP BY
          subq_3.ds
      ) subq_7
    ) subq_8
    ON
      {{ render_date_sub("subq_9", "ds", 2, TimeGranularity.DAY) }} = subq_8.metric_time__day
---
integration_test:
  name: nested_derived_metric_outer_offset_multiple_input_metrics
  description: Tests a nested derived metric where the outer metric has one input metric with offset_to_grain and another with no offset.
  model: SIMPLE_MODEL
  metrics: ["booking_fees_since_start_of_month"]
  group_by_objs: [{"name": "metric_time"}]
  check_query: |
    SELECT
      metric_time__day
      , booking_fees - booking_fees_start_of_month AS booking_fees_since_start_of_month
    FROM (
      SELECT
        COALESCE(subq_8.metric_time__day, subq_14.metric_time__day) AS metric_time__day
        , MAX(subq_8.booking_fees_start_of_month) AS booking_fees_start_of_month
        , MAX(subq_14.booking_fees) AS booking_fees
      FROM (
        SELECT
          subq_7.ds AS metric_time__day
          , subq_5.booking_fees_start_of_month AS booking_fees_start_of_month
        FROM {{ source_schema }}.mf_time_spine subq_7
        INNER JOIN (
          SELECT
            metric_time__day
            , booking_value * 0.05 AS booking_fees_start_of_month
          FROM (
            SELECT
              {{ render_date_trunc("ds", TimeGranularity.DAY) }} AS metric_time__day
              , SUM(booking_value) AS booking_value
            FROM {{ source_schema }}.fct_bookings bookings_source_src_1
            GROUP BY
              {{ render_date_trunc("ds", TimeGranularity.DAY) }}
          ) subq_4
        ) subq_5
        ON
          {{ render_date_trunc("subq_7.ds", TimeGranularity.MONTH) }} = subq_5.metric_time__day
      ) subq_8
      FULL OUTER JOIN (
        SELECT
          metric_time__day
          , booking_value * 0.05 AS booking_fees
        FROM (
          SELECT
            {{ render_date_trunc("ds", TimeGranularity.DAY) }} AS metric_time__day
            , SUM(booking_value) AS booking_value
          FROM {{ source_schema }}.fct_bookings bookings_source_src_1
          GROUP BY
            {{ render_date_trunc("ds", TimeGranularity.DAY) }}
        ) subq_13
      ) subq_14
      ON
        subq_8.metric_time__day = subq_14.metric_time__day
      GROUP BY
        COALESCE(subq_8.metric_time__day, subq_14.metric_time__day)
    ) subq_15
---
integration_test:
  name: nested_derived_metric_offset_with_where_constraint
  description: Tests a nested derived metric where the outer metric has an offset and a constraint is applied to metric_time via where clause.
  model: SIMPLE_MODEL
  metrics: ["bookings_offset_twice"]
  group_by_objs: [{"name": "metric_time", "grain": "day"}]
  where_filter: "{{ render_time_constraint('metric_time__day', '2020-01-08', '2020-01-09') }}"
  check_query: |
    SELECT
      subq_9.ds AS metric_time__day
      , 2 * bookings_offset_once AS bookings_offset_twice
    FROM {{ source_schema }}.mf_time_spine subq_9
    INNER JOIN (
      SELECT
        metric_time__day
        , 2 * bookings AS bookings_offset_once
      FROM (
        SELECT
          subq_3.ds AS metric_time__day
          , SUM(subq_1.bookings) AS bookings
        FROM {{ source_schema }}.mf_time_spine subq_3
        INNER JOIN (
          SELECT
            {{ render_date_trunc("ds", TimeGranularity.DAY) }} AS metric_time__day
            , 1 AS bookings
          FROM {{ source_schema }}.fct_bookings bookings_source_src_1
        ) subq_1
        ON
          {{ render_date_sub("subq_3", "ds", 5, TimeGranularity.DAY) }} = subq_1.metric_time__day
        GROUP BY
          subq_3.ds
      ) subq_7
    ) subq_8
    ON
      {{ render_date_sub("subq_9", "ds", 2, TimeGranularity.DAY) }} = subq_8.metric_time__day
    WHERE {{ render_time_constraint('subq_9.ds', '2020-01-08', '2020-01-09') }}
---
integration_test:
  name: nested_derived_metric_offset_with_time_constraint
  description: Tests a nested derived metric where the outer metric has an offset and a constraint is applied to metric_time via time constraint params.
  model: SIMPLE_MODEL
  metrics: ["bookings_offset_twice"]
  group_by_objs: [{"name": "metric_time", "grain": "day"}]
  time_constraint: ["2020-01-08", "2020-01-09"]
  check_query: |
    SELECT
      subq_9.ds AS metric_time__day
      , 2 * bookings_offset_once AS bookings_offset_twice
    FROM {{ source_schema }}.mf_time_spine subq_9
    INNER JOIN (
      SELECT
        metric_time__day
        , 2 * bookings AS bookings_offset_once
      FROM (
        SELECT
          subq_3.ds AS metric_time__day
          , SUM(subq_1.bookings) AS bookings
        FROM {{ source_schema }}.mf_time_spine subq_3
        INNER JOIN (
          SELECT
            {{ render_date_trunc("ds", TimeGranularity.DAY) }} AS metric_time__day
            , 1 AS bookings
          FROM {{ source_schema }}.fct_bookings bookings_source_src_1
        ) subq_1
        ON
          {{ render_date_sub("subq_3", "ds", 5, TimeGranularity.DAY) }} = subq_1.metric_time__day
        GROUP BY
          subq_3.ds
      ) subq_7
    ) subq_8
    ON
      {{ render_date_sub("subq_9", "ds", 2, TimeGranularity.DAY) }} = subq_8.metric_time__day
    WHERE {{ render_time_constraint('subq_9.ds', '2020-01-08', '2020-01-09') }}
---
integration_test:
  name: time_offset_metric_with_time_constraint
  description: Tests a derived offset metric with a time constraint
  model: SIMPLE_MODEL
  metrics: ["bookings_5_day_lag"]
  group_by_objs: [{"name": "metric_time", "grain": "day"}]
  time_constraint: ["2019-12-19", "2020-01-02"]
  check_query: |
    SELECT
      metric_time__day
      , bookings_5_days_ago AS bookings_5_day_lag
    FROM (
      SELECT
        subq_3.metric_time__day AS metric_time__day
        , SUM(subq_2.bookings) AS bookings_5_days_ago
      FROM (
        SELECT
          ds AS metric_time__day
        FROM {{ source_schema }}.mf_time_spine
        WHERE {{ render_time_constraint('ds', '2019-12-19', '2020-01-02') }}
      ) subq_3
      INNER JOIN (
        SELECT
          {{ render_date_trunc("ds", TimeGranularity.DAY) }} AS metric_time__day
          , 1 AS bookings
        FROM {{ source_schema }}.fct_bookings
      ) subq_2
      ON {{ render_date_sub("subq_3", "metric_time__day", 5, TimeGranularity.DAY) }} = subq_2.metric_time__day
      GROUP BY subq_3.metric_time__day
    )
---
integration_test:
  name: cumulative_time_offset_metric_with_time_constraint
  description: Tests a cumulative derived offset metric with a time constraint
  model: SIMPLE_MODEL
  metrics: ["every_2_days_bookers_2_days_ago"]
  group_by_objs: [{"name": "metric_time", "grain": "day"}]
  time_constraint: ["2019-12-19", "2020-01-02"]
  check_query: |
    SELECT
      subq_5.metric_time__day AS metric_time__day
      , COUNT(DISTINCT subq_4.bookers) AS every_2_days_bookers_2_days_ago
    FROM (
      SELECT
        ds AS metric_time__day
      FROM {{ source_schema }}.mf_time_spine subq_6
      WHERE {{ render_between_time_constraint("ds", "2019-12-19", "2020-01-02") }}
    ) subq_5
    INNER JOIN (
      SELECT
        subq_3.ds AS metric_time__day
        , b.guest_id AS bookers
      FROM {{ source_schema }}.mf_time_spine subq_3
      INNER JOIN
        {{ source_schema }}.fct_bookings b
      ON ({{ render_date_trunc("b.ds", TimeGranularity.DAY) }} <= subq_3.ds)
        AND ({{ render_date_trunc("b.ds", TimeGranularity.DAY) }} > {{ render_date_sub("subq_3", "ds", 2, TimeGranularity.DAY) }})
    ) subq_4
    ON {{ render_date_sub("subq_5", "metric_time__day", 2, TimeGranularity.DAY) }} = subq_4.metric_time__day
    GROUP BY subq_5.metric_time__day
---
integration_test:
  name: nested_derived_metric_offset_with_joined_where_constraint_not_selected
  description: Tests a nested derived metric where the outer metric has an offset and where constraint that requires an additional join, and is not used in the select statement.
  model: SIMPLE_MODEL
  metrics: ["bookings_offset_twice"]
  group_by_objs: [{"name": "metric_time", "grain": "day"}]
  where_filter: "{{ render_dimension_template('booking__is_instant') }}"
  check_query: |
    SELECT
      metric_time__day
      , 2 * bookings_offset_once AS bookings_offset_twice
    FROM (
      SELECT
        metric_time__day
        , bookings_offset_once
      FROM (
        SELECT
          subq_10.ds AS metric_time__day
          , subq_8.booking__is_instant AS booking__is_instant
          , subq_8.bookings_offset_once AS bookings_offset_once
        FROM {{ source_schema }}.mf_time_spine subq_10
        INNER JOIN (
          SELECT
            metric_time__day
            , booking__is_instant
            , 2 * bookings AS bookings_offset_once
          FROM (
            SELECT
              subq_3.ds AS metric_time__day
              , subq_1.booking__is_instant AS booking__is_instant
              , SUM(subq_1.bookings) AS bookings
            FROM {{ source_schema }}.mf_time_spine subq_3
            INNER JOIN (
              SELECT
                {{ render_date_trunc("ds", TimeGranularity.DAY) }} AS metric_time__day
                , is_instant AS booking__is_instant
                , 1 AS bookings
              FROM {{ source_schema }}.fct_bookings
            ) subq_1
            ON {{ render_date_sub("subq_3", "ds", 5, TimeGranularity.DAY) }} = subq_1.metric_time__day
            GROUP BY
              subq_3.ds
              , subq_1.booking__is_instant
          ) subq_7
        ) subq_8
        ON {{ render_date_sub("subq_10", "ds", 2, TimeGranularity.DAY) }} = subq_8.metric_time__day
      ) subq_11
      WHERE booking__is_instant
    )
