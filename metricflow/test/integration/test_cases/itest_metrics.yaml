---
integration_test:
  name: simple_expr_metric
  description: Test for expr metric
  model: SIMPLE_MODEL
  metrics: ["booking_fees"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      SUM(booking_value) * 0.05 AS booking_fees
      , ds AS metric_time
    FROM {{ source_schema }}.fct_bookings
    GROUP BY ds;
---
integration_test:
  name: single_data_source_expr_metric
  description: Tests querying an expression metric sourced from multiple measures, but one data source
  model: SIMPLE_MODEL
  metrics: ["booking_fees_per_booker"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      SUM(booking_value) * 0.05 / COUNT(DISTINCT guest_id) AS booking_fees_per_booker
      , ds AS metric_time
    FROM {{ source_schema }}.fct_bookings
    GROUP BY ds;
---
integration_test:
  name: expr_metric
  description: Tests querying an expression metric sourced from multiple measures, but one data source
  model: SIMPLE_MODEL
  metrics: ["views_times_booking_value"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      booking_value * views AS views_times_booking_value
      , b.ds AS metric_time
    FROM (
      SELECT
        SUM(booking_value) AS booking_value
        , ds
      FROM {{source_schema}}.fct_bookings
      GROUP BY ds
    ) b
    JOIN (
      SELECT
        SUM(1) AS views
        , ds
      FROM {{ source_schema }}.fct_views
      GROUP BY ds
    ) v
    ON b.ds = v.ds
---
integration_test:
  name: constrained_metric
  description: Test a metric with a constraint
  model: SIMPLE_MODEL
  metrics: ["instant_booking_value"]
  group_bys: ["metric_time"]
  where_constraint: "is_instant"
  check_query: |
    SELECT
      SUM(booking_value) AS instant_booking_value
      , ds AS metric_time
    FROM {{ source_schema }}.fct_bookings
    WHERE is_instant
    GROUP BY ds
---
integration_test:
  name: constrained_metric_with_non_constrained_metric_same_source
  description: Testing querying a constrained metric and a non-constrained metric, but sharing a common measure.
  model: SIMPLE_MODEL
  required_features: ["FULL_OUTER_JOIN"]
  metrics: ["booking_value", "instant_booking_value"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      booking_value
      , instant_booking_value
      , a.ds AS metric_time
    FROM (
      SELECT
        SUM(booking_value) AS booking_value
        , ds
      FROM {{ source_schema }}.fct_bookings
      GROUP BY ds
    ) a
    FULL OUTER JOIN (
      SELECT
        SUM(booking_value) AS instant_booking_value
        , ds
      FROM {{ source_schema }}.fct_bookings
      WHERE is_instant
      GROUP BY ds
    ) b
    ON a.ds = b.ds
---
integration_test:
  name: constrained_metric_with_non_constrained_metric_diff_source
  description: Query both a constrained and non-constrained metric.
  model: SIMPLE_MODEL
  required_features: ["FULL_OUTER_JOIN"]
  metrics: ["instant_booking_value", "views"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT instant_booking_value, views, a.ds AS metric_time
    FROM (
      SELECT
        SUM(booking_value) AS instant_booking_value
      , ds
      FROM {{ source_schema }}.fct_bookings
      WHERE is_instant
      GROUP BY ds
    ) a
    FULL OUTER JOIN (
      SELECT
        SUM(1) AS views
        , ds
      FROM {{ source_schema }}.fct_views
      GROUP BY ds
    ) b
    ON a.ds = b.ds
---
integration_test:
  name: identifier_constrained_metric
  description: Query a metric with a an identifier constraint.
  model: SIMPLE_MODEL
  metrics: ["booking_value_for_non_null_listing_id"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      SUM(booking_value) AS booking_value_for_non_null_listing_id
      , ds AS metric_time
    FROM {{ source_schema }}.fct_bookings
    WHERE listing_id IS NOT NULL
    GROUP BY ds
---
integration_test:
  name: dundered_dimension_thats_local
  description: Test metric with local dimensions
  model: SIMPLE_MODEL
  metrics: ["lux_listings"]
  group_bys: ["listing__country_latest"]
  where_constraint: "listing__country_latest = 'us'"
  check_query: |
    SELECT
      SUM(1) AS lux_listings
      , country as listing__country_latest
    FROM {{ source_schema }}.dim_listings_latest
    WHERE
      country='us'
      AND is_lux
    GROUP BY country
---
integration_test:
  name: constrained_metric_with_user_input_constraint
  description: Test metric constrained by metrics definition and a user input
  model: SIMPLE_MODEL
  metrics: ["instant_booking_value"]
  group_bys: ["metric_time"]
  where_constraint: "listing__is_lux_latest"
  check_query: |
    SELECT
      SUM(b.booking_value) AS instant_booking_value
      , b.ds AS metric_time
    FROM {{ source_schema }}.fct_bookings b
    JOIN {{ source_schema }}.dim_listings_latest l
      ON l.listing_id = b.listing_id
    WHERE
      b.is_instant
      AND l.is_lux
    GROUP BY b.ds
---
integration_test:
  name: same_measure_constrained_metric
  description: |
    Query metrics based on the same measure, but where one is constrained. Uses a FULL OUTER JOIN in the check query to
    produce NULL values correctly.
  model: SIMPLE_MODEL
  required_features: ["FULL_OUTER_JOIN"]
  metrics: ["booking_value", "instant_booking_value"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      a.booking_value
      , b.instant_booking_value
      , COALESCE(a.ds, b.ds) AS metric_time
    FROM (
      SELECT
        SUM(booking_value) AS booking_value
        , ds
      FROM {{ source_schema }}.fct_bookings
      GROUP BY ds
    ) a
    FULL OUTER JOIN (
      SELECT
        SUM(booking_value) AS instant_booking_value
        , ds
      FROM {{ source_schema }}.fct_bookings
      WHERE is_instant
      GROUP BY ds
    ) b
    ON a.ds = b.ds
---
integration_test:
 name: min_measure_proxy
 description: Test measure_proxy metric with a min.
 model: SIMPLE_MODEL
 metrics: ["min_booking_value"]
 group_bys: []
 check_query: |
   SELECT
     min(booking_value) AS min_booking_value
   FROM {{ source_schema }}.fct_bookings
---
integration_test:
 name: max_measure_proxy
 description: Test measure_proxy metric with a max.
 model: SIMPLE_MODEL
 metrics: ["max_booking_value"]
 group_bys: []
 check_query: |
   SELECT
     max(booking_value) AS max_booking_value
   FROM {{ source_schema }}.fct_bookings
---
integration_test:
  name: count_distinct
  description: Test count_distinct metric.
  model: SIMPLE_MODEL
  metrics: ["bookers"]
  group_bys: ["metric_time", "is_instant"]
  check_query: |
    SELECT
      COUNT(DISTINCT guest_id) AS bookers
      , is_instant
      , ds AS metric_time
    FROM {{ source_schema }}.fct_bookings
    GROUP BY
      is_instant
      , ds
---
integration_test:
  name: count_distinct_with_constraint
  description: Test count_distinct metric with a constraint.
  model: SIMPLE_MODEL
  metrics: ["bookers"]
  group_bys: ["metric_time"]
  where_constraint: "is_instant"
  check_query: |
    SELECT
      COUNT(DISTINCT guest_id) AS bookers
      , ds AS metric_time
    FROM {{ source_schema }}.fct_bookings
    where is_instant
    GROUP BY
      ds
---
integration_test:
  name: ratio_single_data_source
  description: Test ratio metric from a single data source.
  model: SIMPLE_MODEL
  metrics: ["bookings_per_booker"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      CAST(SUM(1) AS {{ double_data_type_name }}) / COUNT(DISTINCT guest_id) AS bookings_per_booker
      , ds AS metric_time
    FROM {{ source_schema }}.fct_bookings
    GROUP BY ds
---
integration_test:
  name: ratio
  description: Test ratio metric from multiple data source.
  model: SIMPLE_MODEL
  metrics: ["bookings_per_view"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      CAST(bookings AS {{ double_data_type_name }}) / NULLIF(views, 0) AS bookings_per_view
      , groupby_8cbdaa28.ds AS metric_time
    FROM (
      SELECT
        COUNT(*) AS bookings
        , ds
      FROM {{ source_schema }}.fct_bookings
      GROUP BY
        ds
    ) groupby_8cbdaa28
    JOIN (
      SELECT
        SUM(1) AS views
        , ds
      FROM {{ source_schema }}.fct_views
      GROUP BY
        ds
    ) groupby_68058b0b
    ON
    groupby_8cbdaa28.ds = groupby_68058b0b.ds
---
integration_test:
  name: ratio_sort
  description: Test ratio metric with a sort.
  model: SIMPLE_MODEL
  metrics: ["bookings_per_booker"]
  group_bys: ["metric_time"]
  order_bys: ["metric_time"]
  check_query: |
    SELECT
      CAST(SUM(1) AS {{ double_data_type_name }}) / COUNT(DISTINCT guest_id) AS bookings_per_booker
      , ds AS metric_time
    FROM {{ source_schema }}.fct_bookings
    GROUP BY ds
    ORDER BY ds
---
integration_test:
  name: ratio_with_zero_denominator
  description: Test ratio metric with a zero in the denominator.
  model: SIMPLE_MODEL
  metrics: ["bookings_per_dollar"]
  group_bys: ["metric_time"]
  time_constraint: ["2020-01-03", "2020-01-03"]
  check_query: |
    SELECT
      CAST(bookings AS {{ double_data_type_name }}) / NULLIF(booking_value, 0) AS bookings_per_dollar
      , bookings_source.ds AS metric_time
    FROM (
      SELECT
        SUM(1) AS bookings
        , SUM(booking_value) AS booking_value
        , ds
      FROM {{ source_schema }}.fct_bookings
      GROUP BY
        ds
    ) bookings_source
    WHERE {{ render_time_constraint("ds", "2020-01-03", "2020-01-03") }}
---
integration_test:
  name: ratio_primary_ident
  description: Test ratio metric from a single data source.
  model: SIMPLE_MODEL
  metrics: ["bookings_per_listing"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      CAST(bookings AS {{ double_data_type_name }}) / NULLIF(listings, 0) AS bookings_per_listing
      , groupby_8cbdaa28.ds AS metric_time
    FROM (
      SELECT
        COUNT(*) AS bookings
        , ds
      FROM {{ source_schema }}.fct_bookings
      GROUP BY
        ds
    ) groupby_8cbdaa28
    JOIN (
      SELECT
        SUM(1) AS listings
        , created_at AS ds
      FROM {{ source_schema }}.dim_listings_latest
      GROUP BY
        created_at
    ) groupby_68058b0b
    ON
    groupby_8cbdaa28.ds = groupby_68058b0b.ds
---
integration_test:
  name: metrics_with_different_dimension_values
  description: Test querying two metrics with a different primary date dimension.
  model: SIMPLE_MODEL
  required_features: ["FULL_OUTER_JOIN"]
  metrics: ["bookings", "views"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      views
      , bookings
      , COALESCE(a.ds, b.ds) AS metric_time
    FROM (
        SELECT
          SUM(1) AS views
          , ds
        FROM {{ source_schema }}.fct_views
        GROUP BY ds

    ) a
    FULL OUTER JOIN (
        SELECT
          SUM(1) AS bookings
          , ds
        FROM {{ source_schema }}.fct_bookings
        GROUP BY ds
    ) b
    ON a.ds = b.ds
---
integration_test:
  name: ratio_with_non_ratio
  description: Test ratio metric with a non ratio metric with the same measure.
  model: SIMPLE_MODEL
  required_features: ["FULL_OUTER_JOIN"]
  metrics: ["bookings", "bookings_per_view"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      bookings,
      CAST(bookings AS {{ double_data_type_name }}) / NULLIF(views, 0) AS bookings_per_view
      , COALESCE(a.ds, b.ds) AS metric_time
    FROM (
      SELECT
        COUNT(*) AS bookings
        , ds
      FROM {{ source_schema }}.fct_bookings
      GROUP BY
        ds
    ) a
    FULL OUTER JOIN (
      SELECT
        SUM(1) AS views
        , ds
      FROM {{ source_schema }}.fct_views
      GROUP BY
        ds
    ) b
    ON
    a.ds = b.ds
---
integration_test:
  name: query_with_3_metrics
  description: |
    Tests query with 3 metrics, and also checks an optimizing issue when there is a expression metric that is joined.
  model: SIMPLE_MODEL
  required_features: ["FULL_OUTER_JOIN"]
  metrics: ["bookings", "bookings_per_booker", "booking_value",]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      SUM(1) AS bookings
      , CAST(SUM(1) AS {{ double_data_type_name }}) / COUNT(DISTINCT guest_id) AS bookings_per_booker
      , SUM(booking_value) AS booking_value
      , ds AS metric_time
    FROM {{ source_schema }}.fct_bookings
    GROUP BY
      ds
---
integration_test:
  name: metric_with_aggregation_time_dimension_specified.
  description: |
    Tests a query for a metric based on a measure that has the aggregation time dimension specified.
  model: SIMPLE_MODEL
  metrics: ["booking_payments"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      SUM(booking_value) AS booking_payments
      , booking_paid_at AS metric_time
    FROM {{ source_schema }}.fct_bookings
    GROUP BY
      booking_paid_at
---
integration_test:
  name: metrics_with_different_aggregation_time_dimensions
  description: |
    Tests querying multiple metrics based on different aggregation time dimensions
  model: SIMPLE_MODEL
  required_features: ["FULL_OUTER_JOIN"]
  metrics: ["booking_value", "booking_payments"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      booking_value
      , booking_payments
      , COALESCE(a.metric_time, b.metric_time) AS metric_time
    FROM (
      SELECT
        SUM(booking_value) AS booking_value
        , ds AS metric_time
      FROM {{ source_schema }}.fct_bookings
      GROUP BY
        ds
    ) a
    FULL OUTER JOIN (
      SELECT
        SUM(booking_value) AS booking_payments
        , booking_paid_at AS metric_time
      FROM {{ source_schema }}.fct_bookings
      GROUP BY
        booking_paid_at
    ) b
    ON a.metric_time = b.metric_time
