---
integration_test:
  name: semi_additive_measure_query_with_identifier_grouping
  description: Tests selecting a measure with semi additive properties with a window_grouping
  model: SIMPLE_MODEL
  metrics: ["current_account_balance_by_user"]
  group_bys: ["user"]
  check_query: |
    SELECT
      a.user AS user
      , SUM(a.current_account_balance_by_user) AS current_account_balance_by_user
    FROM (
      SELECT
        ds
        , user_id AS user
        , account_balance AS current_account_balance_by_user
      FROM {{ source_schema }}.fct_accounts
    ) a
    INNER JOIN (
      SELECT
        user_id AS user
        , MAX(ds) AS ds
      FROM {{ source_schema }}.fct_accounts
      GROUP BY
        user_id
    ) b
    ON
      a.ds = b.ds AND a.user = b.user
    GROUP BY
      a.user
---
integration_test:
  name: semi_additive_measure_query_with_identifier_grouping_no_group_by
  description: |
    Tests selecting a measure with semi additive properties with a window_grouping that are not in the query group by
  model: SIMPLE_MODEL
  metrics: ["current_account_balance_by_user"]
  group_bys: ["metric_time__week"]
  check_query: |
    SELECT
      a.metric_time__week
      , SUM(a.current_account_balance_by_user) AS current_account_balance_by_user
    FROM (
      SELECT
        ds
        , {{ render_date_trunc("ds", TimeGranularity.WEEK) }} AS metric_time__week
        , user_id AS user
        , account_balance AS current_account_balance_by_user
      FROM {{ source_schema }}.fct_accounts
    ) a
    INNER JOIN (
      SELECT
        user_id AS user
        , {{ render_date_trunc("ds", TimeGranularity.WEEK) }} AS metric_time__week
        , MAX(ds) AS ds
      FROM {{ source_schema }}.fct_accounts
      GROUP BY
        metric_time__week
        , user_id
    ) b
    ON
      a.ds = b.ds AND a.user = b.user
    GROUP BY
      a.metric_time__week
---
integration_test:
  name: semi_additive_measure_query
  description: Tests selecting a measure with semi additive properties
  model: SIMPLE_MODEL
  metrics: ["total_account_balance_first_day"]
  group_bys: ["metric_time"]
  check_query: |
    SELECT
      a.ds AS metric_time
      , SUM(a.total_account_balance_first_day) AS total_account_balance_first_day
    FROM (
      SELECT
        ds
        , account_balance AS total_account_balance_first_day
      FROM {{ source_schema }}.fct_accounts
    ) a
    INNER JOIN (
      SELECT
        MIN(ds) AS ds
        , {{ render_date_trunc("ds", TimeGranularity.DAY) }} AS metric_time
      FROM {{ source_schema }}.fct_accounts
      GROUP BY
        metric_time
    ) b
    ON
      a.ds = b.ds
    GROUP BY
      a.ds
---
integration_test:
  name: semi_additive_measure_query_with_join_linkable_specs
  description: |
    Tests semi-additive measure with a path hitting join linkable specs.
    There are cases (like this query where we have a non-local linkable spec "user__home_state_latest") where
    we are directly copying a MeasureSpec via constructing it. Previously, this led to a code path not passing all the attributes,
    then somewhere along the path it would end up throwing a MeasureSpec not in [List of MeasureSpec] due to an attribute
    being missing. This test case hits that path and ensures that we are copying attributes correctly.
  model: SIMPLE_MODEL
  metrics: ["current_account_balance_by_user"]
  group_bys: ["user"]
  where_filter: "{{ render_dimension_template('home_state_latest', entity_path=['user']) }} = 'CA'"
  check_query: |
    SELECT
      e.user AS user
      , SUM(e.current_account_balance_by_user) AS current_account_balance_by_user
    FROM (
      SELECT
        c.user AS user
        , d.home_state_latest AS user__home_state_latest
        , c.current_account_balance_by_user AS current_account_balance_by_user
      FROM (
        SELECT
          a.user AS user
          , a.current_account_balance_by_user AS current_account_balance_by_user
        FROM (
          SELECT
            ds
            , user_id AS user
            , account_balance AS current_account_balance_by_user
          FROM {{ source_schema }}.fct_accounts
        ) a
        INNER JOIN (
          SELECT
            user_id AS user
            , MAX(ds) AS ds
          FROM {{ source_schema }}.fct_accounts
          GROUP BY
            user_id
        ) b
        ON
          a.ds = b.ds AND a.user = b.user
      ) c
      LEFT OUTER JOIN
        {{ source_schema }}.dim_users_latest d
      ON
        c.user = d.user_id
    ) e
    WHERE user__home_state_latest = 'CA'
    GROUP BY
      e.user
---
integration_test:
  name: semi_additive_measure_query_with_group_by_window
  description: Tests selecting a semi-additive measure with a group by window
  model: SIMPLE_MODEL
  metrics: ["total_account_balance_first_day"]
  group_bys: ["metric_time__week"]
  check_query: |
    SELECT
      a.metric_time__week
      , SUM(a.total_account_balance_first_day) AS total_account_balance_first_day
    FROM (
      SELECT
        ds
        , {{ render_date_trunc("ds", TimeGranularity.WEEK) }} AS metric_time__week
        , account_balance AS total_account_balance_first_day
      FROM {{ source_schema }}.fct_accounts
    ) a
    INNER JOIN (
      SELECT
        MIN(ds) AS ds
        , {{ render_date_trunc("ds", TimeGranularity.WEEK) }} AS metric_time__week
      FROM {{ source_schema }}.fct_accounts
      GROUP BY
        metric_time__week
    ) b
    ON
      a.ds = b.ds
    GROUP BY
      a.metric_time__week
---
integration_test:
  name: semi_additive_measure_query_with_where_filter
  description: Tests selecting a semi-additive measure with where_filter
  model: SIMPLE_MODEL
  metrics: ["current_account_balance_by_user"]
  group_bys: ["user"]
  where_filter: "{{ render_dimension_template('account_type') }} = 'savings'"
  check_query: |
    SELECT
      b.user AS user
      , SUM(b.current_account_balance_by_user) AS current_account_balance_by_user
    FROM (
      SELECT
        ds
        , a.user
        , current_account_balance_by_user
      FROM (
        SELECT
          ds
          , user_id AS user
          , account_type
          , account_balance AS current_account_balance_by_user
        FROM {{ source_schema }}.fct_accounts
      ) a
      WHERE account_type = 'savings'
    ) b
    INNER JOIN (
      SELECT
        c.user
        , MAX(ds) AS ds__complete
      FROM (
        SELECT
          ds
          , user_id AS user
          , account_type
        FROM {{ source_schema }}.fct_accounts
      ) c
      WHERE account_type = 'savings'
      GROUP BY
        c.user
    ) d
    ON
      (b.ds = d.ds__complete) AND (b.user = d.user)
    GROUP BY
      b.user
---
integration_test:
  name: semi_additive_measure_query_with_where_time_constraint
  description: Tests selecting a semi-additive measure with a time constraint written as a where clause
  model: SIMPLE_MODEL
  metrics: ["total_account_balance_first_day"]
  group_bys: ["account_type"]
  where_filter: "{{ render_time_dimension_template('ds', 'day') }} >= '2020-01-03'"
  check_query: |
    SELECT
      b.account_type AS account_type
      , SUM(b.total_account_balance_first_day) AS total_account_balance_first_day
    FROM (
      SELECT
        ds
        , account_type
        , total_account_balance_first_day
      FROM (
        SELECT
          ds
          , account_type
          , account_balance AS total_account_balance_first_day
        FROM {{ source_schema }}.fct_accounts
      ) a
      WHERE ds >= '2020-01-03'
    ) b
    INNER JOIN (
      SELECT
        MIN(ds) AS ds__complete
      FROM (
        SELECT
          ds
        FROM {{ source_schema }}.fct_accounts
      ) c
      WHERE ds >= '2020-01-03'
    ) d
    ON
      b.ds = d.ds__complete
    GROUP BY
      b.account_type
