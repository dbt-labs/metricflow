bigquery:
  target: dev
  outputs:
    dev:
      type: bigquery
      method: service-account-json
      project: "{{ env_var('DBT_ENV_SECRET_PROJECT_ID') }}"
      dataset: "{{ env_var('DBT_ENV_SECRET_SCHEMA') }}"
      keyfile_json:
        type: "{{ env_var('DBT_ENV_SECRET_AUTH_TYPE') }}"
        project_id: "{{ env_var('DBT_ENV_SECRET_PROJECT_ID') }}"
        private_key_id: "{{ env_var('DBT_ENV_SECRET_PRIVATE_KEY_ID') }}"
        private_key: "{{ env_var('DBT_ENV_SECRET_PRIVATE_KEY') }}"
        client_email: "{{ env_var('DBT_ENV_SECRET_CLIENT_EMAIL') }}"
        client_id: "{{ env_var('DBT_ENV_SECRET_CLIENT_ID') }}"
        auth_uri: "{{ env_var('DBT_ENV_SECRET_AUTH_URI') }}"
        token_uri: "{{ env_var('DBT_ENV_SECRET_TOKEN_URI') }}"
        auth_provider_x509_cert_url: "{{ env_var('DBT_ENV_SECRET_AUTH_PROVIDER_CERT_URL') }}"
        client_x509_cert_url: "{{ env_var('DBT_ENV_SECRET_CLIENT_CERT_URL') }}"
databricks:
  target: dev
  outputs:
    dev:
      type: databricks
      host: "{{ env_var('DBT_ENV_SECRET_HOST') }}"
      port: "{{ env_var('DBT_PROFILE_PORT') | int }}"
      token: "{{ env_var('DBT_ENV_SECRET_PASSWORD') }}"
      http_path: "{{ env_var('DBT_ENV_SECRET_HTTP_PATH') }}"
      schema: "{{ env_var('DBT_ENV_SECRET_SCHEMA') }}"
postgres:
  target: dev
  outputs:
    dev:
      type: postgres
      host: "{{ env_var('DBT_ENV_SECRET_HOST') }}"
      port: "{{ env_var('DBT_PROFILE_PORT') | int }}"
      user: "{{ env_var('DBT_ENV_SECRET_USER') }}"
      pass: "{{ env_var('DBT_ENV_SECRET_PASSWORD') }}"
      dbname: "{{ env_var('DBT_ENV_SECRET_DATABASE') }}"
      schema: "{{ env_var('DBT_ENV_SECRET_SCHEMA') }}"
redshift:
  target: dev
  outputs:
    dev:
      type: redshift
      host: "{{ env_var('DBT_ENV_SECRET_HOST') }}"
      port: "{{ env_var('DBT_PROFILE_PORT') | int }}"
      user: "{{ env_var('DBT_ENV_SECRET_USER') }}"
      password: "{{ env_var('DBT_ENV_SECRET_PASSWORD') }}"
      dbname: "{{ env_var('DBT_ENV_SECRET_DATABASE') }}"
      schema: "{{ env_var('DBT_ENV_SECRET_SCHEMA') }}"
snowflake:
  target: dev
  outputs:
    dev:
      type: snowflake
      # The snowflake account is equivalent to the host value in the SqlAlchemy parsed URL
      account: "{{ env_var('DBT_ENV_SECRET_HOST') }}"
      user: "{{ env_var('DBT_ENV_SECRET_USER') }}"
      password: "{{ env_var('DBT_ENV_SECRET_PASSWORD') }}"
      warehouse: "{{ env_var('DBT_ENV_SECRET_WAREHOUSE') }}"
      database: "{{ env_var('DBT_ENV_SECRET_DATABASE') }}"
      schema: "{{ env_var('DBT_ENV_SECRET_SCHEMA') }}"
duckdb:
  target: dev
  outputs:
    dev:
      type: duckdb
      schema: "{{ env_var('DBT_ENV_SECRET_SCHEMA') }}"
trino:
  target: dev
  outputs:
    dev:
      type: trino
      host: "{{ env_var('DBT_ENV_SECRET_HOST') }}"
      port: "{{ env_var('DBT_PROFILE_PORT') | int }}"
      user: "{{ env_var('DBT_ENV_SECRET_USER') }}"
      password: "{{ env_var('DBT_ENV_SECRET_PASSWORD') }}"
      catalog: "{{ env_var('DBT_ENV_SECRET_CATALOG') }}"
      schema: "{{ env_var('DBT_ENV_SECRET_SCHEMA') }}"
