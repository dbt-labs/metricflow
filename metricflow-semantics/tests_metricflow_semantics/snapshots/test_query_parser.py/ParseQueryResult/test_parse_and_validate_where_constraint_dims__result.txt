test_name: test_parse_and_validate_where_constraint_dims
test_filename: test_query_parser.py
docstring:
  Test that the returned time constraint in the query spec is adjusted to match the granularity of the query.
---
ParseQueryResult(
  query_spec=MetricFlowQuerySpec(
    metric_specs=(MetricSpec(element_name='bookings'),),
    time_dimension_specs=(
      TimeDimensionSpec(
        element_name='metric_time',
        time_granularity=ExpandedTimeGranularity(name='day', base_granularity=DAY),
      ),
    ),
    time_range_constraint=TimeRangeConstraint(
      start_time=datetime.datetime(2020, 1, 15, 0, 0),
      end_time=datetime.datetime(2020, 2, 15, 0, 0),
    ),
    filter_intersection=PydanticWhereFilterIntersection(
      where_filters=[
        PydanticWhereFilter(
          where_sql_template="{{ Dimension('booking__is_instant') }} = '1'",
        ),
      ],
    ),
    filter_spec_resolution_lookup=FilterSpecResolutionLookUp(
      spec_resolutions=(
        FilterSpecResolution(
          lookup_key=ResolvedSpecLookUpKey(
            filter_location=WhereFilterLocation(
              location_type=QUERY,
              metric_references=(
                MetricReference(
                  element_name='bookings',
                ),
              ),
            ),
            call_parameter_set=DimensionCallParameterSet(
              entity_path=(
                EntityReference(
                  element_name='booking',
                ),
              ),
              dimension_reference=DimensionReference(
                element_name='is_instant',
              ),
            ),
          ),
          where_filter_intersection=PydanticWhereFilterIntersection(
            where_filters=[
              PydanticWhereFilter(
                where_sql_template=('{{ '
                 "Dimension('booking__is_instant') "
                 '}} '
                 '= '
                 "'1'"),
              ),
            ],
          ),
          resolved_group_by_item_set=GroupByItemSet(
            annotated_specs=(
              AnnotatedSpec(
                element_type=DIMENSION,
                element_name='is_instant',
                entity_link_names=(
                  'booking',
                ),
                element_properties=(
                  LOCAL,
                ),
                origin_semantic_model_names=(
                  'bookings_source',
                ),
                derived_from_semantic_model_names=(
                  'bookings_source',
                ),
              ),
            ),
          ),
          spec_pattern=DimensionPattern(
            parameter_set=SpecPatternParameterSet(
              fields_to_compare=(
                DATE_PART,
                ELEMENT_NAME,
                ENTITY_LINKS,
              ),
              element_name='is_instant',
              entity_links=(
                EntityReference(
                  element_name='booking',
                ),
              ),
            ),
          ),
          filter_location_path=MetricFlowQueryResolutionPath(
            resolution_path_nodes=(
              QueryGroupByItemResolutionNode(node_id=qr_5),
            ),
          ),
          object_builder_str="Dimension('booking__is_instant')",
        ),
      ),
    ),
    min_max_only=False,
    apply_group_by=True,
  ),
  queried_semantic_models=(SemanticModelReference(semantic_model_name='bookings_source'),),
)
