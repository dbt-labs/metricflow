FilterSpecResolutionLookUp(
  spec_resolutions=(
    FilterSpecResolution(
      lookup_key=ResolvedSpecLookUpKey(
        filter_location=WhereFilterLocation(
          metric_references=(
            MetricReference(
              element_name='monthly_metric_0',
            ),
            MetricReference(
              element_name='monthly_metric_1',
            ),
          ),
        ),
        call_parameter_set=TimeDimensionCallParameterSet(
          time_dimension_reference=TimeDimensionReference(
            element_name='metric_time',
          ),
        ),
      ),
      where_filter_intersection=PydanticWhereFilterIntersection(
        where_filters=[
          PydanticWhereFilter(
            where_sql_template="{{ TimeDimension('metric_time') }} > '2020-01-01'",
          ),
        ],
      ),
      resolved_linkable_element_set=LinkableElementSet(
        path_key_to_linkable_dimensions={
          ElementPathKey(
            element_name='metric_time',
            element_type=TIME_DIMENSION,
            time_granularity=MONTH,
          ): (
            LinkableDimension(
              semantic_model_origin=SemanticModelReference(
                semantic_model_name='monthly_measures_source',
              ),
              element_name='metric_time',
              dimension_type=TIME,
              join_path=SemanticModelJoinPath(
                left_semantic_model_reference=SemanticModelReference(
                  semantic_model_name='monthly_measures_source',
                ),
              ),
              properties=frozenset(
                'METRIC_TIME',
              ),
              time_granularity=MONTH,
            ),
          ),
        },
      ),
      spec_pattern=TimeDimensionPattern(
        parameter_set=EntityLinkPatternParameterSet(
          fields_to_compare=(DATE_PART, ELEMENT_NAME, ENTITY_LINKS),
          element_name='metric_time',
        ),
      ),
      filter_location_path=MetricFlowQueryResolutionPath(
        resolution_path_nodes=(QueryGroupByItemResolutionNode(node_id=qr_2),),
      ),
      object_builder_str="TimeDimension('metric_time')",
    ),
  ),
)
