test_name: test_filter_resolution_for_invalid_metric_filter
test_filename: test_spec_lookup.py
---
FilterSpecResolutionLookUp(
  spec_resolutions=(
    FilterSpecResolution(
      lookup_key=ResolvedSpecLookUpKey(
        filter_location=WhereFilterLocation(
          location_type=METRIC,
          metric_references=(
            MetricReference(
              element_name='derived_metric_with_different_parent_time_grains',
            ),
          ),
        ),
        call_parameter_set=TimeDimensionCallParameterSet(
          time_dimension_reference=TimeDimensionReference(
            element_name='metric_time',
          ),
        ),
      ),
      where_filter_intersection=PydanticWhereFilterIntersection(
        where_filters=[
          PydanticWhereFilter(
            where_sql_template=('{{ '
             "TimeDimension('metric_time') "
             "}} > '2020-01-01'"),
          ),
        ],
      ),
      resolved_group_by_item_set=GroupByItemSet(
        annotated_specs=(
          AnnotatedSpec(
            element_type=TIME_DIMENSION,
            element_name='metric_time',
            time_grain=ExpandedTimeGranularity(
              name='year',
              base_granularity=YEAR,
            ),
            element_properties=(
              METRIC_TIME,
              DERIVED_TIME_GRANULARITY,
            ),
            origin_semantic_model_names=(
              'monthly_measures_source',
              'yearly_measure_source',
            ),
            derived_from_semantic_model_names=(
              'monthly_measures_source',
              'yearly_measure_source',
            ),
          ),
        ),
      ),
      spec_pattern=TimeDimensionPattern(
        parameter_set=SpecPatternParameterSet(
          fields_to_compare=(DATE_PART, ELEMENT_NAME, ENTITY_LINKS),
          element_name='metric_time',
        ),
      ),
      filter_location_path=MetricFlowQueryResolutionPath(
        resolution_path_nodes=(
          QueryGroupByItemResolutionNode(node_id=qr_0),
          ComplexMetricGroupByItemResolutionNode(node_id=mtr_0),
        ),
      ),
      object_builder_str="TimeDimension('metric_time')",
    ),
  ),
)
