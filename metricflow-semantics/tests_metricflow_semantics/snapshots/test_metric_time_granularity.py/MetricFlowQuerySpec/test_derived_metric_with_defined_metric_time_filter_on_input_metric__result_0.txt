test_name: test_derived_metric_with_defined_metric_time_filter_on_input_metric
test_filename: test_metric_time_granularity.py
docstring:
  Tests a derived metric with a metric_time filter on its input metric.

      Should use the outer metric's default granularity.
      Should always use the default granularity for the object where the filter is defined.
---
MetricFlowQuerySpec(
  metric_specs=(
    MetricSpec(
      element_name='derived_metric_with_time_granularity_and_inner_metric_time_filter',
      filter_spec_set=WhereFilterSpecSet(),
    ),
  ),
  filter_intersection=PydanticWhereFilterIntersection(),
  filter_spec_resolution_lookup=FilterSpecResolutionLookUp(
    spec_resolutions=(
      FilterSpecResolution(
        lookup_key=ResolvedSpecLookUpKey(
          filter_location=WhereFilterLocation(
            location_type=METRIC,
            metric_references=(
              MetricReference(
                element_name='simple_metric_with_default_time_granularity_and_metric_time_filter',
              ),
            ),
          ),
          call_parameter_set=TimeDimensionCallParameterSet(
            time_dimension_reference=TimeDimensionReference(
              element_name='metric_time',
            ),
          ),
        ),
        where_filter_intersection=PydanticWhereFilterIntersection(
          where_filters=[
            PydanticWhereFilter(
              where_sql_template="{{ TimeDimension('metric_time') }} > '2020-01-01'\n",
            ),
          ],
        ),
        resolved_linkable_element_set=LinkableElementSet(
          path_key_to_linkable_dimensions={
            ElementPathKey(
              element_name='metric_time',
              element_type=TIME_DIMENSION,
              time_granularity=ExpandedTimeGranularity(
                name='quarter',
                base_granularity=QUARTER,
              ),
            ): (
              LinkableDimension(
                properties=(
                  DERIVED_TIME_GRANULARITY,
                  METRIC_TIME,
                ),
                defined_in_semantic_model=SemanticModelReference(
                  semantic_model_name='monthly_measures_source',
                ),
                element_name='metric_time',
                dimension_type=TIME,
                join_path=SemanticModelJoinPath(
                  left_semantic_model_reference=SemanticModelReference(
                    semantic_model_name='monthly_measures_source',
                  ),
                ),
                time_granularity=ExpandedTimeGranularity(
                  name='quarter',
                  base_granularity=QUARTER,
                ),
              ),
            ),
          },
        ),
        spec_pattern=TimeDimensionPattern(
          parameter_set=SpecPatternParameterSet(
            fields_to_compare=(
              DATE_PART,
              ELEMENT_NAME,
              ENTITY_LINKS,
            ),
            element_name='metric_time',
          ),
        ),
        filter_location_path=MetricFlowQueryResolutionPath(
          resolution_path_nodes=(
            QueryGroupByItemResolutionNode(node_id=qr_1),
            MetricGroupByItemResolutionNode(node_id=mtr_1),
            MetricGroupByItemResolutionNode(node_id=mtr_0),
          ),
        ),
        object_builder_str="TimeDimension('metric_time')",
      ),
      FilterSpecResolution(
        lookup_key=ResolvedSpecLookUpKey(
          filter_location=WhereFilterLocation(
            location_type=INPUT_METRIC,
            metric_references=(
              MetricReference(
                element_name='simple_metric_with_default_time_granularity_and_metric_time_filter',
              ),
            ),
          ),
          call_parameter_set=TimeDimensionCallParameterSet(
            time_dimension_reference=TimeDimensionReference(
              element_name='metric_time',
            ),
          ),
        ),
        where_filter_intersection=PydanticWhereFilterIntersection(
          where_filters=[
            PydanticWhereFilter(
              where_sql_template="{{ TimeDimension('metric_time') }} = '2020-01-01'\n",
            ),
          ],
        ),
        resolved_linkable_element_set=LinkableElementSet(
          path_key_to_linkable_dimensions={
            ElementPathKey(
              element_name='metric_time',
              element_type=TIME_DIMENSION,
              time_granularity=ExpandedTimeGranularity(
                name='year',
                base_granularity=YEAR,
              ),
            ): (
              LinkableDimension(
                properties=(
                  DERIVED_TIME_GRANULARITY,
                  METRIC_TIME,
                ),
                defined_in_semantic_model=SemanticModelReference(
                  semantic_model_name='monthly_measures_source',
                ),
                element_name='metric_time',
                dimension_type=TIME,
                join_path=SemanticModelJoinPath(
                  left_semantic_model_reference=SemanticModelReference(
                    semantic_model_name='monthly_measures_source',
                  ),
                ),
                time_granularity=ExpandedTimeGranularity(
                  name='year',
                  base_granularity=YEAR,
                ),
              ),
            ),
          },
        ),
        spec_pattern=TimeDimensionPattern(
          parameter_set=SpecPatternParameterSet(
            fields_to_compare=(
              DATE_PART,
              ELEMENT_NAME,
              ENTITY_LINKS,
            ),
            element_name='metric_time',
          ),
        ),
        filter_location_path=MetricFlowQueryResolutionPath(
          resolution_path_nodes=(
            QueryGroupByItemResolutionNode(node_id=qr_1),
            MetricGroupByItemResolutionNode(node_id=mtr_1),
            MetricGroupByItemResolutionNode(node_id=mtr_0),
          ),
        ),
        object_builder_str="TimeDimension('metric_time')",
      ),
    ),
  ),
  min_max_only=False,
)
