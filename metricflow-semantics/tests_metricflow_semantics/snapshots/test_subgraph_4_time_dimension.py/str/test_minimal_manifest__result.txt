test_name: test_minimal_manifest
test_filename: test_subgraph_4_time_dimension.py
docstring:
  Test generation of the time-dimension subgraph using the minimal manifest.
expectation_description:
  * The graph should show an edge from the joined-model node to the time-dimension node.
  * There should be edges from all time-dimension nodes to the time-entity node.
---
dot_notation:
  digraph {
  	graph [name=MutableSemanticGraph]
  	subgraph cluster_configured_entity {
  		label=configured_entity
  		"bookings_source.booking"
  	}
  	subgraph cluster_bookings_source {
  		label=bookings_source
  		"JoinedModel(bookings_source)"
  		"LocalModel(bookings_source)"
  	}
  	subgraph cluster_time_dimension {
  		label=time_dimension
  		MetricTime
  		"TimeDimension(booking_time)"
  	}
  	subgraph cluster_metric {
  		label=metric
  		"SimpleMetric(bookings)"
  	}
  	subgraph cluster_time {
  		label=time
  		TimeEntity
  	}
  	"bookings_source.booking" -> "JoinedModel(bookings_source)"
  	"JoinedModel(bookings_source)" -> "TimeDimension(booking_time)"
  	"LocalModel(bookings_source)" -> "bookings_source.booking"
  	MetricTime -> TimeEntity
  	"SimpleMetric(bookings)" -> "LocalModel(bookings_source)"
  	"SimpleMetric(bookings)" -> MetricTime
  	"TimeDimension(booking_time)" -> TimeEntity
  }

pretty_format:
  MutableSemanticGraph(
    nodes={
      bookings_source.booking,
      JoinedModel(bookings_source),
      LocalModel(bookings_source),
      MetricTime,
      SimpleMetric(bookings),
      TimeDimension(booking_time),
      TimeEntity,
    },
    edges={
      EntityRelationshipEdge(tail_node=bookings_source.booking, head_node=JoinedModel(bookings_source)),
      EntityRelationshipEdge(tail_node=JoinedModel(bookings_source), head_node=TimeDimension(booking_time)),
      EntityRelationshipEdge(tail_node=LocalModel(bookings_source), head_node=bookings_source.booking),
      EntityRelationshipEdge(tail_node=MetricTime, head_node=TimeEntity),
      EntityRelationshipEdge(tail_node=SimpleMetric(bookings), head_node=LocalModel(bookings_source)),
      EntityRelationshipEdge(tail_node=SimpleMetric(bookings), head_node=MetricTime),
      EntityRelationshipEdge(tail_node=TimeDimension(booking_time), head_node=TimeEntity),
    },
  )
