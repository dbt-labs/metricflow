test_name: test_minimal_manifest
test_filename: test_measure.py
docstring:
  Test generation of the measure subgraph using the minimal manifest.
expectation_description:
  The graph should show the measure node with edges to the model nodes and metric time.
---
dot_notation:
  digraph {
  	graph [name=MutableSemanticGraph]
  	subgraph cluster_time {
  		label=time
  		"TimeAttribute(quarter)"
  		"TimeAttribute(year)"
  		"TimeAttribute(extract_year)"
  		"TimeAttribute(extract_quarter)"
  		"TimeAttribute(custom_year)"
  		TimeEntity
  	}
  	subgraph cluster_sm_0 {
  		label=sm_0
  		"LocalModel(sm_0)"
  		"Measure(sm_0_measure)"
  	}
  	subgraph cluster_time_dimension {
  		label=time_dimension
  		MetricTime
  	}
  	TimeEntity -> "TimeAttribute(custom_year)"
  	TimeEntity -> "TimeAttribute(extract_quarter)"
  	TimeEntity -> "TimeAttribute(extract_year)"
  	TimeEntity -> "TimeAttribute(year)"
  	TimeEntity -> "TimeAttribute(quarter)"
  	"Measure(sm_0_measure)" -> "LocalModel(sm_0)"
  	"Measure(sm_0_measure)" -> MetricTime
  	MetricTime -> TimeEntity
  }

pretty_format:
  MutableSemanticGraph(
    nodes={
      TimeAttribute(quarter),
      TimeAttribute(year),
      TimeAttribute(extract_year),
      TimeAttribute(extract_quarter),
      TimeAttribute(custom_year),
      LocalModel(sm_0),
      Measure(sm_0_measure),
      MetricTime,
      TimeEntity,
    },
    edges={
      EntityAttributeEdge(tail_node=TimeEntity, head_node=TimeAttribute(custom_year)),
      EntityAttributeEdge(tail_node=TimeEntity, head_node=TimeAttribute(extract_quarter)),
      EntityAttributeEdge(tail_node=TimeEntity, head_node=TimeAttribute(extract_year)),
      EntityAttributeEdge(tail_node=TimeEntity, head_node=TimeAttribute(year)),
      EntityAttributeEdge(tail_node=TimeEntity, head_node=TimeAttribute(quarter)),
      EntityRelationshipEdge(tail_node=Measure(sm_0_measure), head_node=LocalModel(sm_0)),
      EntityRelationshipEdge(tail_node=Measure(sm_0_measure), head_node=MetricTime),
      EntityRelationshipEdge(tail_node=MetricTime, head_node=TimeEntity),
    },
  )
